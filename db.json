{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Python_Async_IO.md","hash":"0d1a4bafda8f4f4158ebbd9a847baca024ba379d","modified":1622173540474},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1622173540476},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"79e77fa33a1c76b452918e72f2d85649f1935eef","modified":1622165498454},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/05/28/hello-world/index.html","hash":"af1352af31c7bbb5dfff97f503717c2759310e3c","modified":1622173561676},{"_id":"public/2021/05/28/Python_Async_IO/index.html","hash":"ddacd2a74be2ed1c6c91ce5ced1d3431b397b7d7","modified":1622173561676},{"_id":"public/archives/index.html","hash":"b065307b4bd330a07ab00d9649342f5c30ac5147","modified":1622173561676},{"_id":"public/archives/2021/index.html","hash":"07ff5ea39c51f14419a8daff223e977b0b5da310","modified":1622173561676},{"_id":"public/archives/2021/05/index.html","hash":"f2be4e6946fc5935dc4806cbcd47953dd4217a58","modified":1622173561676},{"_id":"public/categories/Python/index.html","hash":"0ab4896d0c5a08cde6fb251ca3f8c58dd96d3b4a","modified":1622173561676},{"_id":"public/index.html","hash":"392aa0b38b5f4b6817dbb4211bbf1ce12bf01549","modified":1622173561676},{"_id":"public/tags/asyncio/index.html","hash":"1083632ac120a0cd4d410abf206009a577553581","modified":1622173561676},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1622173561676},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1622173561676},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1622173561676},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1622173561676},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1622173561676},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1622173561676},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1622173561676},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1622173561676},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1622173561676},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1622173561676},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1622173561676},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1622173561676}],"Category":[{"name":"Python","_id":"ckp7s97de0002exvf985784vz"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-05-28T03:45:40.476Z","updated":"2021-05-28T03:45:40.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp7s97ct0000exvf2bpq659w","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Python 异步IO编程","date":"2021-05-28T01:51:54.000Z","comments":1,"_content":"\n## 1.协程\n\n想学`asyncio`，得先了解协程，协程是根本呀！\n\n协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：\n\n```python\ndef func1():\n    print(1)\n    ...\n    print(2)\n\ndef func2():\n    print(3)\n    ...\n    print(4)\n\nfunc1()\nfunc2()\n```\n\n上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：`1、2、3、4`。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：`1、3、2、4` 。\n\n在Python中有多种方式可以实现协程，例如：\n\n- greenlet，是一个第三方模块，用于实现协程代码（Gevent 协程就是基于 greenlet 实现）\n- `yield`，生成器，借助生成器的特点也可以实现协程代码。\n- `asyncio`，在 Python 3.4 中引入的模块用于编写协程代码。\n- `async` & `awiat`，在 Python 3.5 中引入的两个关键字，结合`asyncio`模块可以更方便的编写协程代码。\n\n### 1.1 greenlet\n\ngreentlet 是一个第三方模块，需要提前安装 `pip3 install greenlet`才能使用。\n\n```python\nfrom greenlet import greenlet\n\ndef func1():\n    print(1)        # 第1步：输出 1\n    gr2.switch()    # 第3步：切换到 func2 函数\n    print(2)        # 第6步：输出 2\n    gr2.switch()    # 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行\n    \ndef func2():\n    print(3)        # 第4步：输出 3\n    gr1.switch()    # 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行\n    print(4)        # 第8步：输出 4\n    \ngr1 = greenlet(func1)\ngr2 = greenlet(func2)\ngr1.switch() # 第1步：去执行 func1 函数\n```\n\n注意：switch 中也可以传递参数用于在切换执行时相互传递值。\n\n### 1.2 yield\n\n基于 Python 的生成器的`yield`和`yield form`关键字实现协程代码。\n\n```python\ndef func1():\n    yield 1\n    yield from func2()\n    yield 2\n    \ndef func2():\n    yield 3\n    yield 4\n    \nf1 = func1()\nfor item in f1:\n    print(item)\n```\n\n注意：`yield form`关键字是在 Python 3.3 中引入的。\n\n### 1.3 asyncio\n\n在 Python 3.4 之前官方未提供协程的类库，一般大家都是使用 greenlet 等其他来实现。在 Python 3.4 发布后官方正式支持协程，即：`asyncio`模块。\n\n```python\nimport asyncio\n\n@asyncio.coroutine\ndef func1():\n    print(1)\n    yield from asyncio.sleep(2)  # 遇到IO耗时操作，自动化切换到tasks中的其他任务\n    print(2)\n    \n@asyncio.coroutine\ndef func2():\n    print(3)\n    yield from asyncio.sleep(2) # 遇到IO耗时操作，自动化切换到tasks中的其他任务\n    print(4)\n    \ntasks = [\n    asyncio.ensure_future( func1() ),\n    asyncio.ensure_future( func2() )\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n```\n\n注意：基于`asyncio`模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。\n\n### 1.4 `async` & `await`\n\n`async` & `await` 关键字在 Python 3.5 版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。\n\nPython 3.8 之后 `@asyncio.coroutine` 装饰器就会被移除，推荐使用 `async` & `awit` 关键字实现协程代码。\n\n```python\nimport asyncio\n\nasync def func1():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    \nasync def func2():\n    print(3)\n    await asyncio.sleep(2)\n    print(4)\n    \ntasks = [\n    asyncio.ensure_future(func1()),\n    asyncio.ensure_future(func2())\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n```\n\n### 1.5 小结\n\n关于协程有多种实现方式，目前主流使用是Python官方推荐的 `asyncio` 模块和 `async`&`await`关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。\n\n接下来，我们也会针对 `asyncio`模块 + `async` & `await` 关键字进行更加详细的讲解。\n\n## 2.协程的意义\n\n通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行。\n\n**但是**，协程来回切换执行的意义何在呢？（网上看到很多文章舔协程，协程牛逼之处是哪里呢？）\n> 计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程（不等待任务结束就可以去执行其他代码）。\n\n\n### 2.1 爬虫案例\n\n例如：用代码实现下载 `url_list` 中的图片。\n\n- 方式一：同步编程实现\n\n  ```python\n  \"\"\"\n  下载图片使用第三方模块requests，请提前安装：pip3 install requests\n  \"\"\"\n  import requests\n  \n  def download_image(url):\n      print(\"开始下载:\",url)\n      # 发送网络请求，下载图片\n      response = requests.get(url)\n      print(\"下载完成\")\n      # 图片保存到本地文件\n      file_name = url.rsplit('_')[-1]\n      with open(file_name, mode='wb') as file_object:\n          file_object.write(response.content)\n          \n  if __name__ == '__main__':\n      url_list = [\n  \t\t'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n      'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n      'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n      ]\n      for item in url_list:\n          download_image(item)\n  ```\n\n- 方式二：基于协程的异步编程实现\n\n  ```python\n  \"\"\"\n  下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp\n  \"\"\"\n  #!/usr/bin/env python\n  # -*- coding:utf-8 -*-\n  import aiohttp\n  import asyncio\n  \n  async def fetch(session, url):\n      print(\"发送请求：\", url)\n      async with session.get(url, verify_ssl=False) as response:\n          content = await response.content.read()\n          file_name = url.rsplit('_')[-1]\n          with open(file_name, mode='wb') as file_object:\n              file_object.write(content)\n              \n  async def main():\n      async with aiohttp.ClientSession() as session:\n          url_list = [\n  \t'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n      'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n     'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n          ]\n          tasks = [asyncio.create_task(fetch(session, url)) for url in url_list]\n          await asyncio.wait(tasks)\n          \n  if __name__ == '__main__':\n      asyncio.run(main())\n  ```\n\n上述两种的执行对比之后会发现，`基于协程的异步编程` 要比 `同步编程`的效率高了很多。因为：\n\n- 同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟。\n- 异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了。\n\n### 2.2 小结\n\n协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率。\n\n生活中不也是这样的么，假设 你是一家制造汽车的老板，员工点击设备的【开始】按钮之后，在设备前需等待30分钟，然后点击【结束】按钮，此时作为老板的你一定希望这个员工在等待的那30分钟的时间去做点其他的工作。\n\n## 3.异步编程\n\n基于`async` & `await`关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术。\n\n想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看。\n\n### 3.1 事件循环\n\n事件循环，可以把他当做是一个while循环，这个while循环在周期性的运行并执行一些`任务`，在特定条件下终止循环。\n\n```python\n# 伪代码\n任务列表 = [ 任务1, 任务2, 任务3,... ]\nwhile True:\n    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将'可执行'和'已完成'的任务返回\n    for 就绪任务 in 已准备就绪的任务列表:\n        执行已就绪的任务\n    for 已完成的任务 in 已完成的任务列表:\n        在任务列表中移除 已完成的任务\n    如果 任务列表 中的任务都已完成，则终止循环\n```\n\n在编写程序时候可以通过如下代码来获取和创建事件循环。\n\n```python\nimport asyncio\nloop = asyncio.get_event_loop()\n```\n\n### 3.2 协程和异步编程\n\n协程函数，定义形式为 [`async def`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-def) 的函数。\n\n协程对象，调用 *协程函数* 所返回的对象。\n\n```python\n# 定义一个协程函数\nasync def func():\n    pass\n\n# 调用协程函数，返回一个协程对象\nresult = func()\n```\n\n**注意**：调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象。\n\n#### 3.2.1 基本应用\n\n程序中，如果想要执行协程函数的内部代码，需要 `事件循环` 和 `协程对象` 配合才能实现，如：\n\n```python\nimport asyncio\n\nasync def func():\n    print(\"协程内部代码\")\n    \n# 调用协程函数，返回一个协程对象。\nresult = func()\n\n# 方式一\n# loop = asyncio.get_event_loop() # 创建一个事件循环\n# loop.run_until_complete(result) # 将协程当做任务提交到事件循环的任务列表中，协程执行完成之后终止。\n\n# 方式二\n# 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。\n# asyncio.run 函数在 Python 3.7 中加入 asyncio 模块，\nasyncio.run(result)\n```\n\n这个过程可以简单理解为：将`协程`当做任务添加到 `事件循环` 的任务列表，然后事件循环检测列表中的`协程`是否 已准备就绪（默认可理解为就绪状态），如果准备就绪则执行其内部代码。\n\n#### 3.2.2 await\n\nawait是一个只能在协程函数中使用的关键字，用于遇到IO操作时挂起 当前协程（任务），当前协程（任务）挂起过程中 事件循环可以去执行其他的协程（任务），当前协程IO处理完成时，可以再次切换回来执行await之后的代码。代码如下：\n\n**示例1：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。\n    # 当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await asyncio.sleep(2)\n    print(\"IO请求结束，结果为：\", response)\n    \nresult = func()\nasyncio.run(result)\n```\n\n**示例2：**\n\n```python\nimport asyncio\n\nasync def others():\n    print(\"start\")\n    await asyncio.sleep(2)\n    print('end')\n    return '返回值'\n  \nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await others()\n    print(\"IO请求结束，结果为：\", response)\n    \nasyncio.run( func() )\n```\n\n**示例3：**\n\n```python\nimport asyncio\n\nasync def others():\n    print(\"start\")\n    await asyncio.sleep(2)\n    print('end')\n    return '返回值'\n  \nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response1 = await others()\n    print(\"IO请求结束，结果为：\", response1)\n    response2 = await others()\n    print(\"IO请求结束，结果为：\", response2)\n    \nasyncio.run( func() )\n```\n\n上述的所有示例都只是创建了一个任务，即：事件循环的任务列表中只有一个任务，所以在IO等待时无法演示切换到其他任务效果。\n\n在程序想要创建多个任务对象，需要使用Task对象来实现。\n\n#### 3.2.3 Task对象\n\n> *Tasks* are used to schedule coroutines *concurrently*.\n>\n> When a coroutine is wrapped into a *Task* with functions like [`asyncio.create_task()`](https://docs.python.org/3.8/library/asyncio-task.html#asyncio.create_task) the coroutine is automatically scheduled to run soon。\n\nTasks用于并发调度协程，通过`asyncio.create_task(协程对象)`的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 `asyncio.create_task()` 函数以外，还可以用低层级的 `loop.create_task()` 或 `ensure_future()` 函数。不建议手动实例化 Task 对象。\n\n本质上是将协程对象封装成task对象，并将协程立即加入事件循环，同时追踪协程的状态。\n\n注意：`asyncio.create_task()` 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 `asyncio.ensure_future()` 函数。\n\n**示例1：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    return \"返回值\"\n  \nasync def main():\n    print(\"main开始\")\n    # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    task1 = asyncio.create_task(func())\n    \n    # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    task2 = asyncio.create_task(func())\n    \n    print(\"main结束\")\n    # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。\n    # 此处的await是等待相对应的协程全都执行完毕并获取结果\n    ret1 = await task1\n    ret2 = await task2\n    print(ret1, ret2)\n    \nasyncio.run(main())\n```\n\n**示例2：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    return \"返回值\"\n  \nasync def main():\n    print(\"main开始\")\n    # 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    # 在调用\n    task_list = [\n        asyncio.create_task(func(), name=\"n1\"),\n        asyncio.create_task(func(), name=\"n2\")\n    ]\n    print(\"main结束\")\n    # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。\n    # 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done\n    # 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。\n    done, pending = await asyncio.wait(task_list, timeout=None)\n    print(done, pending)\n    \nasyncio.run(main())\n```\n\n注意：`asyncio.wait` 源码内部会对列表中的每个协程执行ensure_future从而封装为Task对象，所以在和wait配合使用时task_list的值为`[func(),func()]` 也是可以的。\n\n**示例3：**\n\n```python\nimport asyncio\nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await asyncio.sleep(2)\n    print(\"IO请求结束，结果为：\", response)\n    \ncoroutine_list = [func(), func()]\n\n# 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ]  \n# 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表，\n# 但此时事件循环还未创建，所以会报错。\n\n# 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程\n# asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。\ndone,pending = asyncio.run( asyncio.wait(coroutine_list) )\n```\n\n#### 3.2.4 asyncio.Future对象\n\n> A `Future`is a special **low-level** awaitable object that represents an **eventual result** of an asynchronous operation.\n\nasyncio中的Future对象是一个相对更偏向底层的可对象，通常我们不会直接用到这个对象，而是直接使用Task对象来完成任务的并和状态的追踪。（ Task 是 Futrue的子类 ）\n\nFuture为我们提供了异步编程中的 最终结果 的处理（Task类也具备状态处理的功能）。\n\n示例1：\n\n```python\nasync def main():\n    # 获取当前事件循环\n    loop = asyncio.get_running_loop()\n    # # 创建一个任务（Future对象），这个任务什么都不干。\n    fut = loop.create_future()\n    # 等待任务最终结果（Future对象），没有结果则会一直等下去。\n    await fut\n    \nasyncio.run(main())\n```\n\n示例2：\n\n```python\nimport asyncio\n\nasync def set_after(fut):\n    await asyncio.sleep(2)\n    fut.set_result(\"666\")\n    \nasync def main():\n    # 获取当前事件循环\n    loop = asyncio.get_running_loop()\n    # 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。\n    fut = loop.create_future()\n    # 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。\n    # 即手动设置future任务的最终结果，那么fut就可以结束了。\n    await loop.create_task(set_after(fut))\n    # 等待 Future对象获取 最终结果，否则一直等下去\n    data = await fut\n    print(data)\n    \nasyncio.run(main())\n```\n\nFuture对象本身函数进行绑定，所以想要让事件循环获取Future的结果，则需要手动设置。而Task对象继承了Future对象，其实就对Future进行扩展，他可以实现在对应绑定的函数执行完成之后，自动执行`set_result`，从而实现自动结束。\n\n虽然，平时使用的是Task对象，但对于结果的处理本质是基于Future对象来实现的。\n\n扩展：支持 `await 对象`语 法的对象课成为可等待对象，所以 `协程对象`、`Task对象`、`Future对象` 都可以被成为可等待对象。\n\n#### 3.2.5 futures.Future对象\n\n在Python的`concurrent.futures`模块中也有一个Future对象，这个对象是基于线程池和进程池实现异步操作时使用的对象。\n\n```python\nimport time\nfrom concurrent.futures import Future\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom concurrent.futures.process import ProcessPoolExecutor\n\ndef func(value):\n    time.sleep(1)\n    print(value)\n    \npool = ThreadPoolExecutor(max_workers=5)\n# 或 pool = ProcessPoolExecutor(max_workers=5)\n\nfor i in range(10):\n    fut = pool.submit(func, i)\n    print(fut)\n```\n\n两个Future对象是不同的，他们是为不同的应用场景而设计，例如：`concurrent.futures.Future`不支持await语法 等。\n\n官方提示两对象之间不同：\n\n- unlike asyncio Futures, [`concurrent.futures.Future`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.Future) instances cannot be awaited.\n- [`asyncio.Future.result()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result) and [`asyncio.Future.exception()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception) do not accept the *timeout* argument.\n- [`asyncio.Future.result()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result) and [`asyncio.Future.exception()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception) raise an [`InvalidStateError`](https://docs.python.org/3.8/library/asyncio-exceptions.html#asyncio.InvalidStateError) exception when the Future is not *done*.\n- Callbacks registered with [`asyncio.Future.add_done_callback()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.add_done_callback) are not called immediately. They are scheduled with [`loop.call_soon()`](https://docs.python.org/3.8/library/asyncio-eventloop.html#asyncio.loop.call_soon) instead.\n- asyncio Future is not compatible with the [`concurrent.futures.wait()`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.wait) and [`concurrent.futures.as_completed()`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.as_completed) functions.\n\n在Python提供了一个将`futures.Future` 对象包装成`asyncio.Future`对象的函数 `asynic.wrap_future`。\n\n接下里你肯定问：为什么python会提供这种功能？\n\n其实，一般在程序开发中我们要么统一使用 asyncio 的协程实现异步操作、要么都使用进程池和线程池实现异步操作。但如果 `协程的异步`和 `进程池/线程池的异步` 混搭时，那么就会用到此功能了。\n\n```python\nimport time\nimport asyncio\nimport concurrent.futures\n\ndef func1():\n    # 某个耗时操作\n    time.sleep(2)\n    return \"SB\"\n  \nasync def main():\n    loop = asyncio.get_running_loop()\n    \n    # 1. Run in the default loop's executor ( 默认ThreadPoolExecutor )\n    # 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象\n    # 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。\n    # 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。\n    fut = loop.run_in_executor(None, func1)\n    result = await fut\n    print('default thread pool', result)\n    \n    # 2. Run in a custom thread pool:\n    # with concurrent.futures.ThreadPoolExecutor() as pool:\n    #     result = await loop.run_in_executor(\n    #         pool, func1)\n    #     print('custom thread pool', result)\n    \n    # 3. Run in a custom process pool:\n    # with concurrent.futures.ProcessPoolExecutor() as pool:\n    #     result = await loop.run_in_executor(\n    #         pool, func1)\n    #     print('custom process pool', result)\n    \nasyncio.run(main())\n```\n\n应用场景：当项目以协程式的异步编程开发时，如果要使用一个第三方模块，而第三方模块不支持协程方式异步编程时，就需要用到这个功能，例如：\n\n```python\nimport asyncio\nimport requests\n\nasync def download_image(url):\n    # 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）\n    print(\"开始下载:\", url)\n    loop = asyncio.get_event_loop()\n    # requests模块默认不支持异步操作，所以就使用线程池来配合实现了。\n    future = loop.run_in_executor(None, requests.get, url)\n    \n    response = await future\n    print('下载完成')\n    # 图片保存到本地文件\n    file_name = url.rsplit('_')[-1]\n    with open(file_name, mode='wb') as file_object:\n        file_object.write(response.content)\n        \nif __name__ == '__main__':\n    url_list = [\n        'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n        'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n        'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n    ]\n    tasks = [download_image(url) for url in url_list]\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete( asyncio.wait(tasks) )\n```\n\n#### 3.2.6 异步迭代器\n\n**什么是异步迭代器**\n\n实现了 [`__aiter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__) 和 [`__anext__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__) 方法的对象。`__anext__` 必须返回一个 [awaitable](https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable) 对象。[`async for`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for) 会处理异步迭代器的 [`__anext__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__) 方法所返回的可等待对象，直到其引发一个 [`StopAsyncIteration`](https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration) 异常。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n**什么是异步可迭代对象？**\n\n可在 [`async for`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for) 语句中被使用的对象。必须通过它的 [`__aiter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__) 方法返回一个 [asynchronous iterator](https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator)。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n```python\nimport asyncio\n\nclass Reader(object):\n    \"\"\" 自定义异步迭代器（同时也是异步可迭代对象） \"\"\"\n    def __init__(self):\n        self.count = 0\n        \n    async def readline(self):\n        # await asyncio.sleep(1)\n        self.count += 1\n        if self.count == 100:\n            return None\n        return self.count\n      \n    def __aiter__(self):\n        return self\n      \n    async def __anext__(self):\n        val = await self.readline()\n        if val == None:\n            raise StopAsyncIteration\n        return val\n      \n      \nasync def func():\n    # 创建异步可迭代对象\n    async_iter = Reader()\n    # async for 必须要放在async def函数内，否则语法错误。\n    async for item in async_iter:\n        print(item)\n        \nasyncio.run(func())\n```\n\n异步迭代器其实没什么太大的作用，只是支持了async for语法而已。\n\n#### 3.2.6 异步上下文管理器\n\n此种对象通过定义 [`__aenter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aenter__) 和 [`__aexit__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__) 方法来对 [`async with`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-with) 语句中的环境进行控制。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n```python\nimport asyncio\n\nclass AsyncContextManager:\n    def __init__(self):\n        self.conn = None\n        \n    async def do_something(self):\n        # 异步操作数据库\n        return 666\n      \n    async def __aenter__(self):\n        # 异步链接数据库\n        self.conn = await asyncio.sleep(1)\n        return self\n      \n    async def __aexit__(self, exc_type, exc, tb):\n        # 异步关闭数据库链接\n        await asyncio.sleep(1)\n        \n        \nasync def func():\n    async with AsyncContextManager() as f:\n        result = await f.do_something()\n        print(result)\n        \nasyncio.run(func())\n```\n\n这个异步的上下文管理器还是比较有用的，平时在开发过程中 打开、处理、关闭 操作时，就可以用这种方式来处理。\n\n### 3.3 小结\n\n在程序中只要看到`async`和`await`关键字，其内部就是基于协程实现的异步编程，这种异步编程是通过一个线程在IO等待时间去执行其他任务，从而实现并发。\n\n以上就是异步编程的常见操作，内容参考官方文档。\n\n- 中文版：https://docs.python.org/zh-cn/3.8/library/asyncio.html\n- 英文本：https://docs.python.org/3.8/library/asyncio.html\n\n## 4. uvloop\n\nPython标准库中提供了`asyncio`模块，用于支持基于协程的异步编程。\n\nuvloop是 asyncio 中的事件循环的替代方案，替换后可以使得asyncio性能提高。事实上，uvloop要比nodejs、gevent等其他python异步框架至少要快2倍，性能可以比肩Go语言。\n\n安装uvloop\n\n```bash\npip3 install uvloop\n```\n\n在项目中想要使用uvloop替换asyncio的事件循环也非常简单，只要在代码中这么做就行。\n\n```python\nimport asyncio\nimport uvloop\nasyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\n# 编写asyncio的代码，与之前写的代码一致。\n\n# 内部的事件循环自动化会变为uvloop\nasyncio.run(...)\n```\n\n注意：知名的asgi uvicorn内部就是使用的 uvloop 的事件循环。\n\n## 5.实战案例\n\n为了更好理解，上述所有示例的IO情况都是以 `asyncio.sleep` 为例，而真实的项目开发中会用到很多IO的情况。\n\n### 5.1 异步Redis\n\n当通过python去操作 redis 时，链接、设置值、获取值 这些都涉及网络IO请求，使用 asycio 异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n\n安装Python异步操作 redis 模块\n\n```bash\npip3 install aioredis\n```\n\n示例1：异步操作redis。\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport aioredis\n\nasync def execute(address, password):\n    print(\"开始执行\", address)\n    # 网络IO操作：创建redis连接\n    redis = await aioredis.create_redis(address, password=password)\n    # 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = { car:{key1:1,key2:2,key3:3}}\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    # 网络IO操作：去redis中获取值\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    redis.close()\n    # 网络IO操作：关闭redis连接\n    await redis.wait_closed()\n    \n    print(\"结束\", address)\n    \nasyncio.run(execute('redis://47.93.4.198:6379', \"root!2345\"))\n```\n\n示例2：连接多个redis做操作（遇到IO会切换其他任务，提供了性能）。\n\n```python\nimport asyncio\nimport aioredis\n\nasync def execute(address, password):\n    print(\"开始执行\", address)\n    # 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379\n    redis = await aioredis.create_redis_pool(address, password=password)\n    # 网络IO操作：遇到IO会自动切换任务\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    # 网络IO操作：遇到IO会自动切换任务\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    redis.close()\n    # 网络IO操作：遇到IO会自动切换任务\n    await redis.wait_closed()\n    print(\"结束\", address)\n    \ntask_list = [\n    execute('redis://47.93.4.197:6379', \"root!2345\"),\n    execute('redis://47.93.4.198:6379', \"root!2345\")\n]\n\nasyncio.run(asyncio.wait(task_list))\n```\n\n更多redis操作参考aioredis官网：https://aioredis.readthedocs.io/en/v1.3.0/start.html\n\n### 5.2 异步MySQL\n\n当通过python去操作MySQL时，连接、执行SQL、关闭都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n\n安装Python异步操作redis模块\n\n```bash\npip3 install aiomysql\n```\n\n示例1：\n\n```python\nimport asyncio\nimport aiomysql\n\nasync def execute():\n    # 网络IO操作：连接MySQL\n    conn = await aiomysql.connect(host='127.0.0.1', port=3306, user='root', password='123', db='mysql', )\n    \n    # 网络IO操作：创建CURSOR\n    cur = await conn.cursor()\n    \n    # 网络IO操作：执行SQL\n    await cur.execute(\"SELECT Host,User FROM user\")\n    \n    # 网络IO操作：获取SQL结果\n    result = await cur.fetchall()\n    print(result)\n    \n    # 网络IO操作：关闭链接\n    await cur.close()\n    conn.close()\n    \nasyncio.run(execute())\n```\n\n示例2：\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport aiomysql\n\nasync def execute(host, password):\n    print(\"开始\", host)\n    # 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379\n    conn = await aiomysql.connect(host=host, port=3306, user='root', password=password, db='mysql')\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    cur = await conn.cursor()\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    await cur.execute(\"SELECT Host,User FROM user\")\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    result = await cur.fetchall()\n    print(result)\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    await cur.close()\n    conn.close()\n    print(\"结束\", host)\n    \ntask_list = [\n    execute('47.93.40.197', \"root!2345\"),\n    execute('47.93.40.197', \"root!2345\")\n]\n\nasyncio.run(asyncio.wait(task_list))\n```\n\n### 5.3 FastAPI框架\n\nFastAPI是一款用于构建API的高性能web框架，框架基于Python3.6+的 `type hints`搭建。\n\n接下里的异步示例以`FastAPI`和`uvicorn`来讲解（uvicorn是一个支持异步的asgi）。\n\n安装FastAPI web 框架，\n\n```python\npip3 install fastapi\n```\n\n安装uvicorn，本质上为web提供socket server的支持的asgi（一般支持异步称asgi、不支持异步称wsgi）\n\n```python\npip3 install uvicorn\n```\n\n示例：\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nimport aioredis\nfrom aioredis import Redis\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nREDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10)\n\n@app.get(\"/\")\ndef index():\n    \"\"\" 普通操作接口 \"\"\"\n    return {\"message\": \"Hello World\"}\n  \n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    print(\"请求来了\")\n    await asyncio.sleep(3)\n    \n    # 连接池获取一个连接\n    conn = await REDIS_POOL.acquire()\n    redis = Redis(conn)\n    \n    # 设置值\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    \n    # 读取值\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    \n    # 连接归还连接池\n    REDIS_POOL.release(conn)\n    return result\n  \nif __name__ == '__main__':\n    uvicorn.run(\"luffy:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n在有多个用户并发请求的情况下，异步方式来编写的接口可以在IO等待过程中去处理其他的请求，提供性能。\n\n例如：同时有两个用户并发来向接口 `http://127.0.0.1:5000/red` 发送请求，服务端只有一个线程，同一时刻只有一个请求被处理。 异步处理可以提供并发是因为：当视图函数在处理第一个请求时，第二个请求此时是等待被处理的状态，当第一个请求遇到IO等待时，会自动切换去接收并处理第二个请求，当遇到IO时自动化切换至其他请求，一旦有请求IO执行完毕，则会再次回到指定请求向下继续执行其功能代码。\n\n基于上下文管理，来实现自动化管理的案例：\n示例1：redis\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nimport aioredis\nfrom aioredis import Redis\nfrom fastapi import FastAPI\n\napp = FastAPI()\nREDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10)\n\n@app.get(\"/\")\ndef index():\n    \"\"\" 普通操作接口 \"\"\"\n    return {\"message\": \"Hello World\"}\n  \n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    print(\"请求来了\")\n    async with REDIS_POOL.get() as conn:\n        redis = Redis(conn)\n        # 设置值\n        await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n        # 读取值\n        result = await redis.hgetall('car', encoding='utf-8')\n        print(result)\n    return result\n  \nif __name__ == '__main__':\n    uvicorn.run(\"fast3:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n示例2：mysql\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nfrom fastapi import FastAPI\nimport aiomysql\n\napp = FastAPI()\n\n# 创建数据库连接池\npool = aiomysql.Pool(host='127.0.0.1', port=3306, user='root', password='123', db='mysql',\n                     minsize=1, maxsize=10, echo=False, pool_recycle=-1, loop=asyncio.get_event_loop())\n\n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    # 去数据库连接池申请链接\n    async with pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            # 网络IO操作：执行SQL\n            await cur.execute(\"SELECT Host,User FROM user\")\n            # 网络IO操作：获取SQL结果\n            result = await cur.fetchall()\n            print(result)\n            # 网络IO操作：关闭链接\n    return {\"result\": \"ok\"}\n\nif __name__ == '__main__':\n    uvicorn.run(\"fast2:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n### 5.4 爬虫\n\n在编写爬虫应用时，需要通过网络IO去请求目标数据，这种情况适合使用异步编程来提升性能，接下来我们使用支持异步编程的aiohttp模块来实现。\n\n安装aiohttp模块\n\n```\npip3 install aiohttp\n```\n\n示例：\n\n```python\nimport aiohttp\nimport asyncio\nasync def fetch(session, url):\n    print(\"发送请求：\", url)\n    async with session.get(url, verify_ssl=False) as response:\n        text = await response.text()\n        print(\"得到结果：\", url, len(text))\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        url_list = [\n            'https://python.org',\n            'https://www.baidu.com',\n            'https://www.pythonav.com'\n        ]\n        tasks = [asyncio.create_task(fetch(session, url)) for url in url_list]\n        await asyncio.wait(tasks)\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## 总结\n\n为了提升性能越来越多的框架都在向异步编程靠拢，例如：sanic、tornado、django3.0、django channels组件 等，用更少资源可以做处理更多的事，何乐而不为呢。\n\n","source":"_posts/Python_Async_IO.md","raw":"---\ntitle: Python 异步IO编程\ndate: 2021/5/28 9:51:54\ncomments: true\ncategories:\n- Python\ntags:\n- asyncio\n---\n\n## 1.协程\n\n想学`asyncio`，得先了解协程，协程是根本呀！\n\n协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：\n\n```python\ndef func1():\n    print(1)\n    ...\n    print(2)\n\ndef func2():\n    print(3)\n    ...\n    print(4)\n\nfunc1()\nfunc2()\n```\n\n上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：`1、2、3、4`。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：`1、3、2、4` 。\n\n在Python中有多种方式可以实现协程，例如：\n\n- greenlet，是一个第三方模块，用于实现协程代码（Gevent 协程就是基于 greenlet 实现）\n- `yield`，生成器，借助生成器的特点也可以实现协程代码。\n- `asyncio`，在 Python 3.4 中引入的模块用于编写协程代码。\n- `async` & `awiat`，在 Python 3.5 中引入的两个关键字，结合`asyncio`模块可以更方便的编写协程代码。\n\n### 1.1 greenlet\n\ngreentlet 是一个第三方模块，需要提前安装 `pip3 install greenlet`才能使用。\n\n```python\nfrom greenlet import greenlet\n\ndef func1():\n    print(1)        # 第1步：输出 1\n    gr2.switch()    # 第3步：切换到 func2 函数\n    print(2)        # 第6步：输出 2\n    gr2.switch()    # 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行\n    \ndef func2():\n    print(3)        # 第4步：输出 3\n    gr1.switch()    # 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行\n    print(4)        # 第8步：输出 4\n    \ngr1 = greenlet(func1)\ngr2 = greenlet(func2)\ngr1.switch() # 第1步：去执行 func1 函数\n```\n\n注意：switch 中也可以传递参数用于在切换执行时相互传递值。\n\n### 1.2 yield\n\n基于 Python 的生成器的`yield`和`yield form`关键字实现协程代码。\n\n```python\ndef func1():\n    yield 1\n    yield from func2()\n    yield 2\n    \ndef func2():\n    yield 3\n    yield 4\n    \nf1 = func1()\nfor item in f1:\n    print(item)\n```\n\n注意：`yield form`关键字是在 Python 3.3 中引入的。\n\n### 1.3 asyncio\n\n在 Python 3.4 之前官方未提供协程的类库，一般大家都是使用 greenlet 等其他来实现。在 Python 3.4 发布后官方正式支持协程，即：`asyncio`模块。\n\n```python\nimport asyncio\n\n@asyncio.coroutine\ndef func1():\n    print(1)\n    yield from asyncio.sleep(2)  # 遇到IO耗时操作，自动化切换到tasks中的其他任务\n    print(2)\n    \n@asyncio.coroutine\ndef func2():\n    print(3)\n    yield from asyncio.sleep(2) # 遇到IO耗时操作，自动化切换到tasks中的其他任务\n    print(4)\n    \ntasks = [\n    asyncio.ensure_future( func1() ),\n    asyncio.ensure_future( func2() )\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n```\n\n注意：基于`asyncio`模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。\n\n### 1.4 `async` & `await`\n\n`async` & `await` 关键字在 Python 3.5 版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。\n\nPython 3.8 之后 `@asyncio.coroutine` 装饰器就会被移除，推荐使用 `async` & `awit` 关键字实现协程代码。\n\n```python\nimport asyncio\n\nasync def func1():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    \nasync def func2():\n    print(3)\n    await asyncio.sleep(2)\n    print(4)\n    \ntasks = [\n    asyncio.ensure_future(func1()),\n    asyncio.ensure_future(func2())\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n```\n\n### 1.5 小结\n\n关于协程有多种实现方式，目前主流使用是Python官方推荐的 `asyncio` 模块和 `async`&`await`关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。\n\n接下来，我们也会针对 `asyncio`模块 + `async` & `await` 关键字进行更加详细的讲解。\n\n## 2.协程的意义\n\n通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行。\n\n**但是**，协程来回切换执行的意义何在呢？（网上看到很多文章舔协程，协程牛逼之处是哪里呢？）\n> 计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程（不等待任务结束就可以去执行其他代码）。\n\n\n### 2.1 爬虫案例\n\n例如：用代码实现下载 `url_list` 中的图片。\n\n- 方式一：同步编程实现\n\n  ```python\n  \"\"\"\n  下载图片使用第三方模块requests，请提前安装：pip3 install requests\n  \"\"\"\n  import requests\n  \n  def download_image(url):\n      print(\"开始下载:\",url)\n      # 发送网络请求，下载图片\n      response = requests.get(url)\n      print(\"下载完成\")\n      # 图片保存到本地文件\n      file_name = url.rsplit('_')[-1]\n      with open(file_name, mode='wb') as file_object:\n          file_object.write(response.content)\n          \n  if __name__ == '__main__':\n      url_list = [\n  \t\t'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n      'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n      'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n      ]\n      for item in url_list:\n          download_image(item)\n  ```\n\n- 方式二：基于协程的异步编程实现\n\n  ```python\n  \"\"\"\n  下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp\n  \"\"\"\n  #!/usr/bin/env python\n  # -*- coding:utf-8 -*-\n  import aiohttp\n  import asyncio\n  \n  async def fetch(session, url):\n      print(\"发送请求：\", url)\n      async with session.get(url, verify_ssl=False) as response:\n          content = await response.content.read()\n          file_name = url.rsplit('_')[-1]\n          with open(file_name, mode='wb') as file_object:\n              file_object.write(content)\n              \n  async def main():\n      async with aiohttp.ClientSession() as session:\n          url_list = [\n  \t'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n      'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n     'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n          ]\n          tasks = [asyncio.create_task(fetch(session, url)) for url in url_list]\n          await asyncio.wait(tasks)\n          \n  if __name__ == '__main__':\n      asyncio.run(main())\n  ```\n\n上述两种的执行对比之后会发现，`基于协程的异步编程` 要比 `同步编程`的效率高了很多。因为：\n\n- 同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟。\n- 异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了。\n\n### 2.2 小结\n\n协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率。\n\n生活中不也是这样的么，假设 你是一家制造汽车的老板，员工点击设备的【开始】按钮之后，在设备前需等待30分钟，然后点击【结束】按钮，此时作为老板的你一定希望这个员工在等待的那30分钟的时间去做点其他的工作。\n\n## 3.异步编程\n\n基于`async` & `await`关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术。\n\n想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看。\n\n### 3.1 事件循环\n\n事件循环，可以把他当做是一个while循环，这个while循环在周期性的运行并执行一些`任务`，在特定条件下终止循环。\n\n```python\n# 伪代码\n任务列表 = [ 任务1, 任务2, 任务3,... ]\nwhile True:\n    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将'可执行'和'已完成'的任务返回\n    for 就绪任务 in 已准备就绪的任务列表:\n        执行已就绪的任务\n    for 已完成的任务 in 已完成的任务列表:\n        在任务列表中移除 已完成的任务\n    如果 任务列表 中的任务都已完成，则终止循环\n```\n\n在编写程序时候可以通过如下代码来获取和创建事件循环。\n\n```python\nimport asyncio\nloop = asyncio.get_event_loop()\n```\n\n### 3.2 协程和异步编程\n\n协程函数，定义形式为 [`async def`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-def) 的函数。\n\n协程对象，调用 *协程函数* 所返回的对象。\n\n```python\n# 定义一个协程函数\nasync def func():\n    pass\n\n# 调用协程函数，返回一个协程对象\nresult = func()\n```\n\n**注意**：调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象。\n\n#### 3.2.1 基本应用\n\n程序中，如果想要执行协程函数的内部代码，需要 `事件循环` 和 `协程对象` 配合才能实现，如：\n\n```python\nimport asyncio\n\nasync def func():\n    print(\"协程内部代码\")\n    \n# 调用协程函数，返回一个协程对象。\nresult = func()\n\n# 方式一\n# loop = asyncio.get_event_loop() # 创建一个事件循环\n# loop.run_until_complete(result) # 将协程当做任务提交到事件循环的任务列表中，协程执行完成之后终止。\n\n# 方式二\n# 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。\n# asyncio.run 函数在 Python 3.7 中加入 asyncio 模块，\nasyncio.run(result)\n```\n\n这个过程可以简单理解为：将`协程`当做任务添加到 `事件循环` 的任务列表，然后事件循环检测列表中的`协程`是否 已准备就绪（默认可理解为就绪状态），如果准备就绪则执行其内部代码。\n\n#### 3.2.2 await\n\nawait是一个只能在协程函数中使用的关键字，用于遇到IO操作时挂起 当前协程（任务），当前协程（任务）挂起过程中 事件循环可以去执行其他的协程（任务），当前协程IO处理完成时，可以再次切换回来执行await之后的代码。代码如下：\n\n**示例1：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。\n    # 当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await asyncio.sleep(2)\n    print(\"IO请求结束，结果为：\", response)\n    \nresult = func()\nasyncio.run(result)\n```\n\n**示例2：**\n\n```python\nimport asyncio\n\nasync def others():\n    print(\"start\")\n    await asyncio.sleep(2)\n    print('end')\n    return '返回值'\n  \nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await others()\n    print(\"IO请求结束，结果为：\", response)\n    \nasyncio.run( func() )\n```\n\n**示例3：**\n\n```python\nimport asyncio\n\nasync def others():\n    print(\"start\")\n    await asyncio.sleep(2)\n    print('end')\n    return '返回值'\n  \nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response1 = await others()\n    print(\"IO请求结束，结果为：\", response1)\n    response2 = await others()\n    print(\"IO请求结束，结果为：\", response2)\n    \nasyncio.run( func() )\n```\n\n上述的所有示例都只是创建了一个任务，即：事件循环的任务列表中只有一个任务，所以在IO等待时无法演示切换到其他任务效果。\n\n在程序想要创建多个任务对象，需要使用Task对象来实现。\n\n#### 3.2.3 Task对象\n\n> *Tasks* are used to schedule coroutines *concurrently*.\n>\n> When a coroutine is wrapped into a *Task* with functions like [`asyncio.create_task()`](https://docs.python.org/3.8/library/asyncio-task.html#asyncio.create_task) the coroutine is automatically scheduled to run soon。\n\nTasks用于并发调度协程，通过`asyncio.create_task(协程对象)`的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 `asyncio.create_task()` 函数以外，还可以用低层级的 `loop.create_task()` 或 `ensure_future()` 函数。不建议手动实例化 Task 对象。\n\n本质上是将协程对象封装成task对象，并将协程立即加入事件循环，同时追踪协程的状态。\n\n注意：`asyncio.create_task()` 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 `asyncio.ensure_future()` 函数。\n\n**示例1：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    return \"返回值\"\n  \nasync def main():\n    print(\"main开始\")\n    # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    task1 = asyncio.create_task(func())\n    \n    # 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    task2 = asyncio.create_task(func())\n    \n    print(\"main结束\")\n    # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。\n    # 此处的await是等待相对应的协程全都执行完毕并获取结果\n    ret1 = await task1\n    ret2 = await task2\n    print(ret1, ret2)\n    \nasyncio.run(main())\n```\n\n**示例2：**\n\n```python\nimport asyncio\n\nasync def func():\n    print(1)\n    await asyncio.sleep(2)\n    print(2)\n    return \"返回值\"\n  \nasync def main():\n    print(\"main开始\")\n    # 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。\n    # 在调用\n    task_list = [\n        asyncio.create_task(func(), name=\"n1\"),\n        asyncio.create_task(func(), name=\"n2\")\n    ]\n    print(\"main结束\")\n    # 当执行某协程遇到IO操作时，会自动化切换执行其他任务。\n    # 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done\n    # 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。\n    done, pending = await asyncio.wait(task_list, timeout=None)\n    print(done, pending)\n    \nasyncio.run(main())\n```\n\n注意：`asyncio.wait` 源码内部会对列表中的每个协程执行ensure_future从而封装为Task对象，所以在和wait配合使用时task_list的值为`[func(),func()]` 也是可以的。\n\n**示例3：**\n\n```python\nimport asyncio\nasync def func():\n    print(\"执行协程函数内部代码\")\n    # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。\n    response = await asyncio.sleep(2)\n    print(\"IO请求结束，结果为：\", response)\n    \ncoroutine_list = [func(), func()]\n\n# 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ]  \n# 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表，\n# 但此时事件循环还未创建，所以会报错。\n\n# 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程\n# asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。\ndone,pending = asyncio.run( asyncio.wait(coroutine_list) )\n```\n\n#### 3.2.4 asyncio.Future对象\n\n> A `Future`is a special **low-level** awaitable object that represents an **eventual result** of an asynchronous operation.\n\nasyncio中的Future对象是一个相对更偏向底层的可对象，通常我们不会直接用到这个对象，而是直接使用Task对象来完成任务的并和状态的追踪。（ Task 是 Futrue的子类 ）\n\nFuture为我们提供了异步编程中的 最终结果 的处理（Task类也具备状态处理的功能）。\n\n示例1：\n\n```python\nasync def main():\n    # 获取当前事件循环\n    loop = asyncio.get_running_loop()\n    # # 创建一个任务（Future对象），这个任务什么都不干。\n    fut = loop.create_future()\n    # 等待任务最终结果（Future对象），没有结果则会一直等下去。\n    await fut\n    \nasyncio.run(main())\n```\n\n示例2：\n\n```python\nimport asyncio\n\nasync def set_after(fut):\n    await asyncio.sleep(2)\n    fut.set_result(\"666\")\n    \nasync def main():\n    # 获取当前事件循环\n    loop = asyncio.get_running_loop()\n    # 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。\n    fut = loop.create_future()\n    # 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。\n    # 即手动设置future任务的最终结果，那么fut就可以结束了。\n    await loop.create_task(set_after(fut))\n    # 等待 Future对象获取 最终结果，否则一直等下去\n    data = await fut\n    print(data)\n    \nasyncio.run(main())\n```\n\nFuture对象本身函数进行绑定，所以想要让事件循环获取Future的结果，则需要手动设置。而Task对象继承了Future对象，其实就对Future进行扩展，他可以实现在对应绑定的函数执行完成之后，自动执行`set_result`，从而实现自动结束。\n\n虽然，平时使用的是Task对象，但对于结果的处理本质是基于Future对象来实现的。\n\n扩展：支持 `await 对象`语 法的对象课成为可等待对象，所以 `协程对象`、`Task对象`、`Future对象` 都可以被成为可等待对象。\n\n#### 3.2.5 futures.Future对象\n\n在Python的`concurrent.futures`模块中也有一个Future对象，这个对象是基于线程池和进程池实现异步操作时使用的对象。\n\n```python\nimport time\nfrom concurrent.futures import Future\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom concurrent.futures.process import ProcessPoolExecutor\n\ndef func(value):\n    time.sleep(1)\n    print(value)\n    \npool = ThreadPoolExecutor(max_workers=5)\n# 或 pool = ProcessPoolExecutor(max_workers=5)\n\nfor i in range(10):\n    fut = pool.submit(func, i)\n    print(fut)\n```\n\n两个Future对象是不同的，他们是为不同的应用场景而设计，例如：`concurrent.futures.Future`不支持await语法 等。\n\n官方提示两对象之间不同：\n\n- unlike asyncio Futures, [`concurrent.futures.Future`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.Future) instances cannot be awaited.\n- [`asyncio.Future.result()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result) and [`asyncio.Future.exception()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception) do not accept the *timeout* argument.\n- [`asyncio.Future.result()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result) and [`asyncio.Future.exception()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception) raise an [`InvalidStateError`](https://docs.python.org/3.8/library/asyncio-exceptions.html#asyncio.InvalidStateError) exception when the Future is not *done*.\n- Callbacks registered with [`asyncio.Future.add_done_callback()`](https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.add_done_callback) are not called immediately. They are scheduled with [`loop.call_soon()`](https://docs.python.org/3.8/library/asyncio-eventloop.html#asyncio.loop.call_soon) instead.\n- asyncio Future is not compatible with the [`concurrent.futures.wait()`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.wait) and [`concurrent.futures.as_completed()`](https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.as_completed) functions.\n\n在Python提供了一个将`futures.Future` 对象包装成`asyncio.Future`对象的函数 `asynic.wrap_future`。\n\n接下里你肯定问：为什么python会提供这种功能？\n\n其实，一般在程序开发中我们要么统一使用 asyncio 的协程实现异步操作、要么都使用进程池和线程池实现异步操作。但如果 `协程的异步`和 `进程池/线程池的异步` 混搭时，那么就会用到此功能了。\n\n```python\nimport time\nimport asyncio\nimport concurrent.futures\n\ndef func1():\n    # 某个耗时操作\n    time.sleep(2)\n    return \"SB\"\n  \nasync def main():\n    loop = asyncio.get_running_loop()\n    \n    # 1. Run in the default loop's executor ( 默认ThreadPoolExecutor )\n    # 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象\n    # 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。\n    # 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。\n    fut = loop.run_in_executor(None, func1)\n    result = await fut\n    print('default thread pool', result)\n    \n    # 2. Run in a custom thread pool:\n    # with concurrent.futures.ThreadPoolExecutor() as pool:\n    #     result = await loop.run_in_executor(\n    #         pool, func1)\n    #     print('custom thread pool', result)\n    \n    # 3. Run in a custom process pool:\n    # with concurrent.futures.ProcessPoolExecutor() as pool:\n    #     result = await loop.run_in_executor(\n    #         pool, func1)\n    #     print('custom process pool', result)\n    \nasyncio.run(main())\n```\n\n应用场景：当项目以协程式的异步编程开发时，如果要使用一个第三方模块，而第三方模块不支持协程方式异步编程时，就需要用到这个功能，例如：\n\n```python\nimport asyncio\nimport requests\n\nasync def download_image(url):\n    # 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）\n    print(\"开始下载:\", url)\n    loop = asyncio.get_event_loop()\n    # requests模块默认不支持异步操作，所以就使用线程池来配合实现了。\n    future = loop.run_in_executor(None, requests.get, url)\n    \n    response = await future\n    print('下载完成')\n    # 图片保存到本地文件\n    file_name = url.rsplit('_')[-1]\n    with open(file_name, mode='wb') as file_object:\n        file_object.write(response.content)\n        \nif __name__ == '__main__':\n    url_list = [\n        'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg',\n        'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg',\n        'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg'\n    ]\n    tasks = [download_image(url) for url in url_list]\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete( asyncio.wait(tasks) )\n```\n\n#### 3.2.6 异步迭代器\n\n**什么是异步迭代器**\n\n实现了 [`__aiter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__) 和 [`__anext__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__) 方法的对象。`__anext__` 必须返回一个 [awaitable](https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable) 对象。[`async for`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for) 会处理异步迭代器的 [`__anext__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__) 方法所返回的可等待对象，直到其引发一个 [`StopAsyncIteration`](https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration) 异常。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n**什么是异步可迭代对象？**\n\n可在 [`async for`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for) 语句中被使用的对象。必须通过它的 [`__aiter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__) 方法返回一个 [asynchronous iterator](https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator)。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n```python\nimport asyncio\n\nclass Reader(object):\n    \"\"\" 自定义异步迭代器（同时也是异步可迭代对象） \"\"\"\n    def __init__(self):\n        self.count = 0\n        \n    async def readline(self):\n        # await asyncio.sleep(1)\n        self.count += 1\n        if self.count == 100:\n            return None\n        return self.count\n      \n    def __aiter__(self):\n        return self\n      \n    async def __anext__(self):\n        val = await self.readline()\n        if val == None:\n            raise StopAsyncIteration\n        return val\n      \n      \nasync def func():\n    # 创建异步可迭代对象\n    async_iter = Reader()\n    # async for 必须要放在async def函数内，否则语法错误。\n    async for item in async_iter:\n        print(item)\n        \nasyncio.run(func())\n```\n\n异步迭代器其实没什么太大的作用，只是支持了async for语法而已。\n\n#### 3.2.6 异步上下文管理器\n\n此种对象通过定义 [`__aenter__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aenter__) 和 [`__aexit__()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__) 方法来对 [`async with`](https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-with) 语句中的环境进行控制。由 [**PEP 492**](https://www.python.org/dev/peps/pep-0492) 引入。\n\n```python\nimport asyncio\n\nclass AsyncContextManager:\n    def __init__(self):\n        self.conn = None\n        \n    async def do_something(self):\n        # 异步操作数据库\n        return 666\n      \n    async def __aenter__(self):\n        # 异步链接数据库\n        self.conn = await asyncio.sleep(1)\n        return self\n      \n    async def __aexit__(self, exc_type, exc, tb):\n        # 异步关闭数据库链接\n        await asyncio.sleep(1)\n        \n        \nasync def func():\n    async with AsyncContextManager() as f:\n        result = await f.do_something()\n        print(result)\n        \nasyncio.run(func())\n```\n\n这个异步的上下文管理器还是比较有用的，平时在开发过程中 打开、处理、关闭 操作时，就可以用这种方式来处理。\n\n### 3.3 小结\n\n在程序中只要看到`async`和`await`关键字，其内部就是基于协程实现的异步编程，这种异步编程是通过一个线程在IO等待时间去执行其他任务，从而实现并发。\n\n以上就是异步编程的常见操作，内容参考官方文档。\n\n- 中文版：https://docs.python.org/zh-cn/3.8/library/asyncio.html\n- 英文本：https://docs.python.org/3.8/library/asyncio.html\n\n## 4. uvloop\n\nPython标准库中提供了`asyncio`模块，用于支持基于协程的异步编程。\n\nuvloop是 asyncio 中的事件循环的替代方案，替换后可以使得asyncio性能提高。事实上，uvloop要比nodejs、gevent等其他python异步框架至少要快2倍，性能可以比肩Go语言。\n\n安装uvloop\n\n```bash\npip3 install uvloop\n```\n\n在项目中想要使用uvloop替换asyncio的事件循环也非常简单，只要在代码中这么做就行。\n\n```python\nimport asyncio\nimport uvloop\nasyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\n# 编写asyncio的代码，与之前写的代码一致。\n\n# 内部的事件循环自动化会变为uvloop\nasyncio.run(...)\n```\n\n注意：知名的asgi uvicorn内部就是使用的 uvloop 的事件循环。\n\n## 5.实战案例\n\n为了更好理解，上述所有示例的IO情况都是以 `asyncio.sleep` 为例，而真实的项目开发中会用到很多IO的情况。\n\n### 5.1 异步Redis\n\n当通过python去操作 redis 时，链接、设置值、获取值 这些都涉及网络IO请求，使用 asycio 异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n\n安装Python异步操作 redis 模块\n\n```bash\npip3 install aioredis\n```\n\n示例1：异步操作redis。\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport aioredis\n\nasync def execute(address, password):\n    print(\"开始执行\", address)\n    # 网络IO操作：创建redis连接\n    redis = await aioredis.create_redis(address, password=password)\n    # 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = { car:{key1:1,key2:2,key3:3}}\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    # 网络IO操作：去redis中获取值\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    redis.close()\n    # 网络IO操作：关闭redis连接\n    await redis.wait_closed()\n    \n    print(\"结束\", address)\n    \nasyncio.run(execute('redis://47.93.4.198:6379', \"root!2345\"))\n```\n\n示例2：连接多个redis做操作（遇到IO会切换其他任务，提供了性能）。\n\n```python\nimport asyncio\nimport aioredis\n\nasync def execute(address, password):\n    print(\"开始执行\", address)\n    # 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379\n    redis = await aioredis.create_redis_pool(address, password=password)\n    # 网络IO操作：遇到IO会自动切换任务\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    # 网络IO操作：遇到IO会自动切换任务\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    redis.close()\n    # 网络IO操作：遇到IO会自动切换任务\n    await redis.wait_closed()\n    print(\"结束\", address)\n    \ntask_list = [\n    execute('redis://47.93.4.197:6379', \"root!2345\"),\n    execute('redis://47.93.4.198:6379', \"root!2345\")\n]\n\nasyncio.run(asyncio.wait(task_list))\n```\n\n更多redis操作参考aioredis官网：https://aioredis.readthedocs.io/en/v1.3.0/start.html\n\n### 5.2 异步MySQL\n\n当通过python去操作MySQL时，连接、执行SQL、关闭都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。\n\n安装Python异步操作redis模块\n\n```bash\npip3 install aiomysql\n```\n\n示例1：\n\n```python\nimport asyncio\nimport aiomysql\n\nasync def execute():\n    # 网络IO操作：连接MySQL\n    conn = await aiomysql.connect(host='127.0.0.1', port=3306, user='root', password='123', db='mysql', )\n    \n    # 网络IO操作：创建CURSOR\n    cur = await conn.cursor()\n    \n    # 网络IO操作：执行SQL\n    await cur.execute(\"SELECT Host,User FROM user\")\n    \n    # 网络IO操作：获取SQL结果\n    result = await cur.fetchall()\n    print(result)\n    \n    # 网络IO操作：关闭链接\n    await cur.close()\n    conn.close()\n    \nasyncio.run(execute())\n```\n\n示例2：\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport aiomysql\n\nasync def execute(host, password):\n    print(\"开始\", host)\n    # 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379\n    conn = await aiomysql.connect(host=host, port=3306, user='root', password=password, db='mysql')\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    cur = await conn.cursor()\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    await cur.execute(\"SELECT Host,User FROM user\")\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    result = await cur.fetchall()\n    print(result)\n    \n    # 网络IO操作：遇到IO会自动切换任务\n    await cur.close()\n    conn.close()\n    print(\"结束\", host)\n    \ntask_list = [\n    execute('47.93.40.197', \"root!2345\"),\n    execute('47.93.40.197', \"root!2345\")\n]\n\nasyncio.run(asyncio.wait(task_list))\n```\n\n### 5.3 FastAPI框架\n\nFastAPI是一款用于构建API的高性能web框架，框架基于Python3.6+的 `type hints`搭建。\n\n接下里的异步示例以`FastAPI`和`uvicorn`来讲解（uvicorn是一个支持异步的asgi）。\n\n安装FastAPI web 框架，\n\n```python\npip3 install fastapi\n```\n\n安装uvicorn，本质上为web提供socket server的支持的asgi（一般支持异步称asgi、不支持异步称wsgi）\n\n```python\npip3 install uvicorn\n```\n\n示例：\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nimport aioredis\nfrom aioredis import Redis\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nREDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10)\n\n@app.get(\"/\")\ndef index():\n    \"\"\" 普通操作接口 \"\"\"\n    return {\"message\": \"Hello World\"}\n  \n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    print(\"请求来了\")\n    await asyncio.sleep(3)\n    \n    # 连接池获取一个连接\n    conn = await REDIS_POOL.acquire()\n    redis = Redis(conn)\n    \n    # 设置值\n    await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n    \n    # 读取值\n    result = await redis.hgetall('car', encoding='utf-8')\n    print(result)\n    \n    # 连接归还连接池\n    REDIS_POOL.release(conn)\n    return result\n  \nif __name__ == '__main__':\n    uvicorn.run(\"luffy:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n在有多个用户并发请求的情况下，异步方式来编写的接口可以在IO等待过程中去处理其他的请求，提供性能。\n\n例如：同时有两个用户并发来向接口 `http://127.0.0.1:5000/red` 发送请求，服务端只有一个线程，同一时刻只有一个请求被处理。 异步处理可以提供并发是因为：当视图函数在处理第一个请求时，第二个请求此时是等待被处理的状态，当第一个请求遇到IO等待时，会自动切换去接收并处理第二个请求，当遇到IO时自动化切换至其他请求，一旦有请求IO执行完毕，则会再次回到指定请求向下继续执行其功能代码。\n\n基于上下文管理，来实现自动化管理的案例：\n示例1：redis\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nimport aioredis\nfrom aioredis import Redis\nfrom fastapi import FastAPI\n\napp = FastAPI()\nREDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10)\n\n@app.get(\"/\")\ndef index():\n    \"\"\" 普通操作接口 \"\"\"\n    return {\"message\": \"Hello World\"}\n  \n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    print(\"请求来了\")\n    async with REDIS_POOL.get() as conn:\n        redis = Redis(conn)\n        # 设置值\n        await redis.hmset_dict('car', key1=1, key2=2, key3=3)\n        # 读取值\n        result = await redis.hgetall('car', encoding='utf-8')\n        print(result)\n    return result\n  \nif __name__ == '__main__':\n    uvicorn.run(\"fast3:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n示例2：mysql\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport asyncio\nimport uvicorn\nfrom fastapi import FastAPI\nimport aiomysql\n\napp = FastAPI()\n\n# 创建数据库连接池\npool = aiomysql.Pool(host='127.0.0.1', port=3306, user='root', password='123', db='mysql',\n                     minsize=1, maxsize=10, echo=False, pool_recycle=-1, loop=asyncio.get_event_loop())\n\n@app.get(\"/red\")\nasync def red():\n    \"\"\" 异步操作接口 \"\"\"\n    # 去数据库连接池申请链接\n    async with pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            # 网络IO操作：执行SQL\n            await cur.execute(\"SELECT Host,User FROM user\")\n            # 网络IO操作：获取SQL结果\n            result = await cur.fetchall()\n            print(result)\n            # 网络IO操作：关闭链接\n    return {\"result\": \"ok\"}\n\nif __name__ == '__main__':\n    uvicorn.run(\"fast2:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\")\n```\n\n### 5.4 爬虫\n\n在编写爬虫应用时，需要通过网络IO去请求目标数据，这种情况适合使用异步编程来提升性能，接下来我们使用支持异步编程的aiohttp模块来实现。\n\n安装aiohttp模块\n\n```\npip3 install aiohttp\n```\n\n示例：\n\n```python\nimport aiohttp\nimport asyncio\nasync def fetch(session, url):\n    print(\"发送请求：\", url)\n    async with session.get(url, verify_ssl=False) as response:\n        text = await response.text()\n        print(\"得到结果：\", url, len(text))\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        url_list = [\n            'https://python.org',\n            'https://www.baidu.com',\n            'https://www.pythonav.com'\n        ]\n        tasks = [asyncio.create_task(fetch(session, url)) for url in url_list]\n        await asyncio.wait(tasks)\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## 总结\n\n为了提升性能越来越多的框架都在向异步编程靠拢，例如：sanic、tornado、django3.0、django channels组件 等，用更少资源可以做处理更多的事，何乐而不为呢。\n\n","slug":"Python_Async_IO","published":1,"updated":"2021-05-28T03:45:40.474Z","layout":"post","photos":[],"link":"","_id":"ckp7s97dc0001exvf8ioeeonp","content":"<h2 id=\"1-协程\"><a href=\"#1-协程\" class=\"headerlink\" title=\"1.协程\"></a>1.协程</h2><p>想学<code>asyncio</code>，得先了解协程，协程是根本呀！</p>\n<p>协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">func1()</span><br><span class=\"line\">func2()</span><br></pre></td></tr></table></figure>\n\n<p>上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：<code>1、2、3、4</code>。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：<code>1、3、2、4</code> 。</p>\n<p>在Python中有多种方式可以实现协程，例如：</p>\n<ul>\n<li>greenlet，是一个第三方模块，用于实现协程代码（Gevent 协程就是基于 greenlet 实现）</li>\n<li><code>yield</code>，生成器，借助生成器的特点也可以实现协程代码。</li>\n<li><code>asyncio</code>，在 Python 3.4 中引入的模块用于编写协程代码。</li>\n<li><code>async</code> &amp; <code>awiat</code>，在 Python 3.5 中引入的两个关键字，结合<code>asyncio</code>模块可以更方便的编写协程代码。</li>\n</ul>\n<h3 id=\"1-1-greenlet\"><a href=\"#1-1-greenlet\" class=\"headerlink\" title=\"1.1 greenlet\"></a>1.1 greenlet</h3><p>greentlet 是一个第三方模块，需要提前安装 <code>pip3 install greenlet</code>才能使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> greenlet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)        <span class=\"comment\"># 第1步：输出 1</span></span><br><span class=\"line\">    gr2.switch()    <span class=\"comment\"># 第3步：切换到 func2 函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)        <span class=\"comment\"># 第6步：输出 2</span></span><br><span class=\"line\">    gr2.switch()    <span class=\"comment\"># 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)        <span class=\"comment\"># 第4步：输出 3</span></span><br><span class=\"line\">    gr1.switch()    <span class=\"comment\"># 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)        <span class=\"comment\"># 第8步：输出 4</span></span><br><span class=\"line\">    </span><br><span class=\"line\">gr1 = greenlet(func1)</span><br><span class=\"line\">gr2 = greenlet(func2)</span><br><span class=\"line\">gr1.switch() <span class=\"comment\"># 第1步：去执行 func1 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：switch 中也可以传递参数用于在切换执行时相互传递值。</p>\n<h3 id=\"1-2-yield\"><a href=\"#1-2-yield\" class=\"headerlink\" title=\"1.2 yield\"></a>1.2 yield</h3><p>基于 Python 的生成器的<code>yield</code>和<code>yield form</code>关键字实现协程代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> func2()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span></span><br><span class=\"line\">    </span><br><span class=\"line\">f1 = func1()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>yield form</code>关键字是在 Python 3.3 中引入的。</p>\n<h3 id=\"1-3-asyncio\"><a href=\"#1-3-asyncio\" class=\"headerlink\" title=\"1.3 asyncio\"></a>1.3 asyncio</h3><p>在 Python 3.4 之前官方未提供协程的类库，一般大家都是使用 greenlet 等其他来实现。在 Python 3.4 发布后官方正式支持协程，即：<code>asyncio</code>模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">2</span>)  <span class=\"comment\"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">tasks = [</span><br><span class=\"line\">    asyncio.ensure_future( func1() ),</span><br><span class=\"line\">    asyncio.ensure_future( func2() )</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>\n\n<p>注意：基于<code>asyncio</code>模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。</p>\n<h3 id=\"1-4-async-amp-await\"><a href=\"#1-4-async-amp-await\" class=\"headerlink\" title=\"1.4 async &amp; await\"></a>1.4 <code>async</code> &amp; <code>await</code></h3><p><code>async</code> &amp; <code>await</code> 关键字在 Python 3.5 版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。</p>\n<p>Python 3.8 之后 <code>@asyncio.coroutine</code> 装饰器就会被移除，推荐使用 <code>async</code> &amp; <code>awit</code> 关键字实现协程代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">tasks = [</span><br><span class=\"line\">    asyncio.ensure_future(func1()),</span><br><span class=\"line\">    asyncio.ensure_future(func2())</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-小结\"><a href=\"#1-5-小结\" class=\"headerlink\" title=\"1.5 小结\"></a>1.5 小结</h3><p>关于协程有多种实现方式，目前主流使用是Python官方推荐的 <code>asyncio</code> 模块和 <code>async</code>&amp;<code>await</code>关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。</p>\n<p>接下来，我们也会针对 <code>asyncio</code>模块 + <code>async</code> &amp; <code>await</code> 关键字进行更加详细的讲解。</p>\n<h2 id=\"2-协程的意义\"><a href=\"#2-协程的意义\" class=\"headerlink\" title=\"2.协程的意义\"></a>2.协程的意义</h2><p>通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行。</p>\n<p><strong>但是</strong>，协程来回切换执行的意义何在呢？（网上看到很多文章舔协程，协程牛逼之处是哪里呢？）</p>\n<blockquote>\n<p>计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程（不等待任务结束就可以去执行其他代码）。</p>\n</blockquote>\n<h3 id=\"2-1-爬虫案例\"><a href=\"#2-1-爬虫案例\" class=\"headerlink\" title=\"2.1 爬虫案例\"></a>2.1 爬虫案例</h3><p>例如：用代码实现下载 <code>url_list</code> 中的图片。</p>\n<ul>\n<li><p>方式一：同步编程实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">下载图片使用第三方模块requests，请提前安装：pip3 install requests</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_image</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始下载:&quot;</span>,url)</span><br><span class=\"line\">    <span class=\"comment\"># 发送网络请求，下载图片</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;下载完成&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 图片保存到本地文件</span></span><br><span class=\"line\">    file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">        file_object.write(response.content)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url_list = [</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">        download_image(item)</span><br></pre></td></tr></table></figure></li>\n<li><p>方式二：基于协程的异步编程实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> aiohttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch</span>(<span class=\"params\">session, url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;发送请求：&quot;</span>, url)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.get(url, verify_ssl=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">        content = <span class=\"keyword\">await</span> response.content.read()</span><br><span class=\"line\">        file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">            file_object.write(content)</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        url_list = [</span><br><span class=\"line\">\t<span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        tasks = [asyncio.create_task(fetch(session, url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.wait(tasks)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    asyncio.run(main())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>上述两种的执行对比之后会发现，<code>基于协程的异步编程</code> 要比 <code>同步编程</code>的效率高了很多。因为：</p>\n<ul>\n<li>同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟。</li>\n<li>异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了。</li>\n</ul>\n<h3 id=\"2-2-小结\"><a href=\"#2-2-小结\" class=\"headerlink\" title=\"2.2 小结\"></a>2.2 小结</h3><p>协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率。</p>\n<p>生活中不也是这样的么，假设 你是一家制造汽车的老板，员工点击设备的【开始】按钮之后，在设备前需等待30分钟，然后点击【结束】按钮，此时作为老板的你一定希望这个员工在等待的那30分钟的时间去做点其他的工作。</p>\n<h2 id=\"3-异步编程\"><a href=\"#3-异步编程\" class=\"headerlink\" title=\"3.异步编程\"></a>3.异步编程</h2><p>基于<code>async</code> &amp; <code>await</code>关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术。</p>\n<p>想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看。</p>\n<h3 id=\"3-1-事件循环\"><a href=\"#3-1-事件循环\" class=\"headerlink\" title=\"3.1 事件循环\"></a>3.1 事件循环</h3><p>事件循环，可以把他当做是一个while循环，这个while循环在周期性的运行并执行一些<code>任务</code>，在特定条件下终止循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 伪代码</span></span><br><span class=\"line\">任务列表 = [ 任务<span class=\"number\">1</span>, 任务<span class=\"number\">2</span>, 任务<span class=\"number\">3</span>,... ]</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将<span class=\"string\">&#x27;可执行&#x27;</span>和<span class=\"string\">&#x27;已完成&#x27;</span>的任务返回</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 就绪任务 <span class=\"keyword\">in</span> 已准备就绪的任务列表:</span><br><span class=\"line\">        执行已就绪的任务</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 已完成的任务 <span class=\"keyword\">in</span> 已完成的任务列表:</span><br><span class=\"line\">        在任务列表中移除 已完成的任务</span><br><span class=\"line\">    如果 任务列表 中的任务都已完成，则终止循环</span><br></pre></td></tr></table></figure>\n\n<p>在编写程序时候可以通过如下代码来获取和创建事件循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-协程和异步编程\"><a href=\"#3-2-协程和异步编程\" class=\"headerlink\" title=\"3.2 协程和异步编程\"></a>3.2 协程和异步编程</h3><p>协程函数，定义形式为 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-def\"><code>async def</code></a> 的函数。</p>\n<p>协程对象，调用 <em>协程函数</em> 所返回的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个协程函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用协程函数，返回一个协程对象</span></span><br><span class=\"line\">result = func()</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象。</p>\n<h4 id=\"3-2-1-基本应用\"><a href=\"#3-2-1-基本应用\" class=\"headerlink\" title=\"3.2.1 基本应用\"></a>3.2.1 基本应用</h4><p>程序中，如果想要执行协程函数的内部代码，需要 <code>事件循环</code> 和 <code>协程对象</code> 配合才能实现，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;协程内部代码&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 调用协程函数，返回一个协程对象。</span></span><br><span class=\"line\">result = func()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"comment\"># loop = asyncio.get_event_loop() # 创建一个事件循环</span></span><br><span class=\"line\"><span class=\"comment\"># loop.run_until_complete(result) # 将协程当做任务提交到事件循环的任务列表中，协程执行完成之后终止。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二</span></span><br><span class=\"line\"><span class=\"comment\"># 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。</span></span><br><span class=\"line\"><span class=\"comment\"># asyncio.run 函数在 Python 3.7 中加入 asyncio 模块，</span></span><br><span class=\"line\">asyncio.run(result)</span><br></pre></td></tr></table></figure>\n\n<p>这个过程可以简单理解为：将<code>协程</code>当做任务添加到 <code>事件循环</code> 的任务列表，然后事件循环检测列表中的<code>协程</code>是否 已准备就绪（默认可理解为就绪状态），如果准备就绪则执行其内部代码。</p>\n<h4 id=\"3-2-2-await\"><a href=\"#3-2-2-await\" class=\"headerlink\" title=\"3.2.2 await\"></a>3.2.2 await</h4><p>await是一个只能在协程函数中使用的关键字，用于遇到IO操作时挂起 当前协程（任务），当前协程（任务）挂起过程中 事件循环可以去执行其他的协程（任务），当前协程IO处理完成时，可以再次切换回来执行await之后的代码。代码如下：</p>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。</span></span><br><span class=\"line\">    <span class=\"comment\"># 当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">result = func()</span><br><span class=\"line\">asyncio.run(result)</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">others</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值&#x27;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run( func() )</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">others</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值&#x27;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response1 = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response1)</span><br><span class=\"line\">    response2 = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response2)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run( func() )</span><br></pre></td></tr></table></figure>\n\n<p>上述的所有示例都只是创建了一个任务，即：事件循环的任务列表中只有一个任务，所以在IO等待时无法演示切换到其他任务效果。</p>\n<p>在程序想要创建多个任务对象，需要使用Task对象来实现。</p>\n<h4 id=\"3-2-3-Task对象\"><a href=\"#3-2-3-Task对象\" class=\"headerlink\" title=\"3.2.3 Task对象\"></a>3.2.3 Task对象</h4><blockquote>\n<p><em>Tasks</em> are used to schedule coroutines <em>concurrently</em>.</p>\n<p>When a coroutine is wrapped into a <em>Task</em> with functions like <a href=\"https://docs.python.org/3.8/library/asyncio-task.html#asyncio.create_task\"><code>asyncio.create_task()</code></a> the coroutine is automatically scheduled to run soon。</p>\n</blockquote>\n<p>Tasks用于并发调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数以外，还可以用低层级的 <code>loop.create_task()</code> 或 <code>ensure_future()</code> 函数。不建议手动实例化 Task 对象。</p>\n<p>本质上是将协程对象封装成task对象，并将协程立即加入事件循环，同时追踪协程的状态。</p>\n<p>注意：<code>asyncio.create_task()</code> 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数。</p>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;返回值&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    task1 = asyncio.create_task(func())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    task2 = asyncio.create_task(func())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main结束&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处的await是等待相对应的协程全都执行完毕并获取结果</span></span><br><span class=\"line\">    ret1 = <span class=\"keyword\">await</span> task1</span><br><span class=\"line\">    ret2 = <span class=\"keyword\">await</span> task2</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret1, ret2)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;返回值&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    <span class=\"comment\"># 在调用</span></span><br><span class=\"line\">    task_list = [</span><br><span class=\"line\">        asyncio.create_task(func(), name=<span class=\"string\">&quot;n1&quot;</span>),</span><br><span class=\"line\">        asyncio.create_task(func(), name=<span class=\"string\">&quot;n2&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main结束&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。</span></span><br><span class=\"line\">    done, pending = <span class=\"keyword\">await</span> asyncio.wait(task_list, timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(done, pending)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>asyncio.wait</code> 源码内部会对列表中的每个协程执行ensure_future从而封装为Task对象，所以在和wait配合使用时task_list的值为<code>[func(),func()]</code> 也是可以的。</p>\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">coroutine_list = [func(), func()]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ]  </span></span><br><span class=\"line\"><span class=\"comment\"># 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表，</span></span><br><span class=\"line\"><span class=\"comment\"># 但此时事件循环还未创建，所以会报错。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程</span></span><br><span class=\"line\"><span class=\"comment\"># asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。</span></span><br><span class=\"line\">done,pending = asyncio.run( asyncio.wait(coroutine_list) )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-4-asyncio-Future对象\"><a href=\"#3-2-4-asyncio-Future对象\" class=\"headerlink\" title=\"3.2.4 asyncio.Future对象\"></a>3.2.4 asyncio.Future对象</h4><blockquote>\n<p>A <code>Future</code>is a special <strong>low-level</strong> awaitable object that represents an <strong>eventual result</strong> of an asynchronous operation.</p>\n</blockquote>\n<p>asyncio中的Future对象是一个相对更偏向底层的可对象，通常我们不会直接用到这个对象，而是直接使用Task对象来完成任务的并和状态的追踪。（ Task 是 Futrue的子类 ）</p>\n<p>Future为我们提供了异步编程中的 最终结果 的处理（Task类也具备状态处理的功能）。</p>\n<p>示例1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前事件循环</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    <span class=\"comment\"># # 创建一个任务（Future对象），这个任务什么都不干。</span></span><br><span class=\"line\">    fut = loop.create_future()</span><br><span class=\"line\">    <span class=\"comment\"># 等待任务最终结果（Future对象），没有结果则会一直等下去。</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_after</span>(<span class=\"params\">fut</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    fut.set_result(<span class=\"string\">&quot;666&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前事件循环</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。</span></span><br><span class=\"line\">    fut = loop.create_future()</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。</span></span><br><span class=\"line\">    <span class=\"comment\"># 即手动设置future任务的最终结果，那么fut就可以结束了。</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> loop.create_task(set_after(fut))</span><br><span class=\"line\">    <span class=\"comment\"># 等待 Future对象获取 最终结果，否则一直等下去</span></span><br><span class=\"line\">    data = <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>Future对象本身函数进行绑定，所以想要让事件循环获取Future的结果，则需要手动设置。而Task对象继承了Future对象，其实就对Future进行扩展，他可以实现在对应绑定的函数执行完成之后，自动执行<code>set_result</code>，从而实现自动结束。</p>\n<p>虽然，平时使用的是Task对象，但对于结果的处理本质是基于Future对象来实现的。</p>\n<p>扩展：支持 <code>await 对象</code>语 法的对象课成为可等待对象，所以 <code>协程对象</code>、<code>Task对象</code>、<code>Future对象</code> 都可以被成为可等待对象。</p>\n<h4 id=\"3-2-5-futures-Future对象\"><a href=\"#3-2-5-futures-Future对象\" class=\"headerlink\" title=\"3.2.5 futures.Future对象\"></a>3.2.5 futures.Future对象</h4><p>在Python的<code>concurrent.futures</code>模块中也有一个Future对象，这个对象是基于线程池和进程池实现异步操作时使用的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> Future</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures.thread <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures.process <span class=\"keyword\">import</span> ProcessPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">value</span>):</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">    </span><br><span class=\"line\">pool = ThreadPoolExecutor(max_workers=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或 pool = ProcessPoolExecutor(max_workers=5)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    fut = pool.submit(func, i)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fut)</span><br></pre></td></tr></table></figure>\n\n<p>两个Future对象是不同的，他们是为不同的应用场景而设计，例如：<code>concurrent.futures.Future</code>不支持await语法 等。</p>\n<p>官方提示两对象之间不同：</p>\n<ul>\n<li>unlike asyncio Futures, <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.Future\"><code>concurrent.futures.Future</code></a> instances cannot be awaited.</li>\n<li><a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result\"><code>asyncio.Future.result()</code></a> and <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception\"><code>asyncio.Future.exception()</code></a> do not accept the <em>timeout</em> argument.</li>\n<li><a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result\"><code>asyncio.Future.result()</code></a> and <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception\"><code>asyncio.Future.exception()</code></a> raise an <a href=\"https://docs.python.org/3.8/library/asyncio-exceptions.html#asyncio.InvalidStateError\"><code>InvalidStateError</code></a> exception when the Future is not <em>done</em>.</li>\n<li>Callbacks registered with <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.add_done_callback\"><code>asyncio.Future.add_done_callback()</code></a> are not called immediately. They are scheduled with <a href=\"https://docs.python.org/3.8/library/asyncio-eventloop.html#asyncio.loop.call_soon\"><code>loop.call_soon()</code></a> instead.</li>\n<li>asyncio Future is not compatible with the <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.wait\"><code>concurrent.futures.wait()</code></a> and <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.as_completed\"><code>concurrent.futures.as_completed()</code></a> functions.</li>\n</ul>\n<p>在Python提供了一个将<code>futures.Future</code> 对象包装成<code>asyncio.Future</code>对象的函数 <code>asynic.wrap_future</code>。</p>\n<p>接下里你肯定问：为什么python会提供这种功能？</p>\n<p>其实，一般在程序开发中我们要么统一使用 asyncio 的协程实现异步操作、要么都使用进程池和线程池实现异步操作。但如果 <code>协程的异步</code>和 <code>进程池/线程池的异步</code> 混搭时，那么就会用到此功能了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> concurrent.futures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 某个耗时操作</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SB&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 1. Run in the default loop&#x27;s executor ( 默认ThreadPoolExecutor )</span></span><br><span class=\"line\">    <span class=\"comment\"># 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。</span></span><br><span class=\"line\">    fut = loop.run_in_executor(<span class=\"literal\">None</span>, func1)</span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;default thread pool&#x27;</span>, result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 2. Run in a custom thread pool:</span></span><br><span class=\"line\">    <span class=\"comment\"># with concurrent.futures.ThreadPoolExecutor() as pool:</span></span><br><span class=\"line\">    <span class=\"comment\">#     result = await loop.run_in_executor(</span></span><br><span class=\"line\">    <span class=\"comment\">#         pool, func1)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(&#x27;custom thread pool&#x27;, result)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 3. Run in a custom process pool:</span></span><br><span class=\"line\">    <span class=\"comment\"># with concurrent.futures.ProcessPoolExecutor() as pool:</span></span><br><span class=\"line\">    <span class=\"comment\">#     result = await loop.run_in_executor(</span></span><br><span class=\"line\">    <span class=\"comment\">#         pool, func1)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(&#x27;custom process pool&#x27;, result)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：当项目以协程式的异步编程开发时，如果要使用一个第三方模块，而第三方模块不支持协程方式异步编程时，就需要用到这个功能，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_image</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始下载:&quot;</span>, url)</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    <span class=\"comment\"># requests模块默认不支持异步操作，所以就使用线程池来配合实现了。</span></span><br><span class=\"line\">    future = loop.run_in_executor(<span class=\"literal\">None</span>, requests.get, url)</span><br><span class=\"line\">    </span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> future</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;下载完成&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 图片保存到本地文件</span></span><br><span class=\"line\">    file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">        file_object.write(response.content)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url_list = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    tasks = [download_image(url) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete( asyncio.wait(tasks) )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-6-异步迭代器\"><a href=\"#3-2-6-异步迭代器\" class=\"headerlink\" title=\"3.2.6 异步迭代器\"></a>3.2.6 异步迭代器</h4><p><strong>什么是异步迭代器</strong></p>\n<p>实现了 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__\"><code>__aiter__()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__\"><code>__anext__()</code></a> 方法的对象。<code>__anext__</code> 必须返回一个 <a href=\"https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable\">awaitable</a> 对象。<a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for\"><code>async for</code></a> 会处理异步迭代器的 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__\"><code>__anext__()</code></a> 方法所返回的可等待对象，直到其引发一个 <a href=\"https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration\"><code>StopAsyncIteration</code></a> 异常。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<p><strong>什么是异步可迭代对象？</strong></p>\n<p>可在 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for\"><code>async for</code></a> 语句中被使用的对象。必须通过它的 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__\"><code>__aiter__()</code></a> 方法返回一个 <a href=\"https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator\">asynchronous iterator</a>。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 自定义异步迭代器（同时也是异步可迭代对象） &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readline</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># await asyncio.sleep(1)</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.count == <span class=\"number\">100</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.count</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aiter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__anext__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        val = <span class=\"keyword\">await</span> self.readline()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopAsyncIteration</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建异步可迭代对象</span></span><br><span class=\"line\">    async_iter = Reader()</span><br><span class=\"line\">    <span class=\"comment\"># async for 必须要放在async def函数内，否则语法错误。</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> async_iter:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">        </span><br><span class=\"line\">asyncio.run(func())</span><br></pre></td></tr></table></figure>\n\n<p>异步迭代器其实没什么太大的作用，只是支持了async for语法而已。</p>\n<h4 id=\"3-2-6-异步上下文管理器\"><a href=\"#3-2-6-异步上下文管理器\" class=\"headerlink\" title=\"3.2.6 异步上下文管理器\"></a>3.2.6 异步上下文管理器</h4><p>此种对象通过定义 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aenter__\"><code>__aenter__()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__\"><code>__aexit__()</code></a> 方法来对 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-with\"><code>async with</code></a> 语句中的环境进行控制。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncContextManager</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.conn = <span class=\"literal\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步操作数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">666</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aenter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步链接数据库</span></span><br><span class=\"line\">        self.conn = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aexit__</span>(<span class=\"params\">self, exc_type, exc, tb</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步关闭数据库链接</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> AsyncContextManager() <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> f.do_something()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">        </span><br><span class=\"line\">asyncio.run(func())</span><br></pre></td></tr></table></figure>\n\n<p>这个异步的上下文管理器还是比较有用的，平时在开发过程中 打开、处理、关闭 操作时，就可以用这种方式来处理。</p>\n<h3 id=\"3-3-小结\"><a href=\"#3-3-小结\" class=\"headerlink\" title=\"3.3 小结\"></a>3.3 小结</h3><p>在程序中只要看到<code>async</code>和<code>await</code>关键字，其内部就是基于协程实现的异步编程，这种异步编程是通过一个线程在IO等待时间去执行其他任务，从而实现并发。</p>\n<p>以上就是异步编程的常见操作，内容参考官方文档。</p>\n<ul>\n<li>中文版：<a href=\"https://docs.python.org/zh-cn/3.8/library/asyncio.html\">https://docs.python.org/zh-cn/3.8/library/asyncio.html</a></li>\n<li>英文本：<a href=\"https://docs.python.org/3.8/library/asyncio.html\">https://docs.python.org/3.8/library/asyncio.html</a></li>\n</ul>\n<h2 id=\"4-uvloop\"><a href=\"#4-uvloop\" class=\"headerlink\" title=\"4. uvloop\"></a>4. uvloop</h2><p>Python标准库中提供了<code>asyncio</code>模块，用于支持基于协程的异步编程。</p>\n<p>uvloop是 asyncio 中的事件循环的替代方案，替换后可以使得asyncio性能提高。事实上，uvloop要比nodejs、gevent等其他python异步框架至少要快2倍，性能可以比肩Go语言。</p>\n<p>安装uvloop</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install uvloop</span><br></pre></td></tr></table></figure>\n\n<p>在项目中想要使用uvloop替换asyncio的事件循环也非常简单，只要在代码中这么做就行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvloop</span><br><span class=\"line\">asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编写asyncio的代码，与之前写的代码一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 内部的事件循环自动化会变为uvloop</span></span><br><span class=\"line\">asyncio.run(...)</span><br></pre></td></tr></table></figure>\n\n<p>注意：知名的asgi uvicorn内部就是使用的 uvloop 的事件循环。</p>\n<h2 id=\"5-实战案例\"><a href=\"#5-实战案例\" class=\"headerlink\" title=\"5.实战案例\"></a>5.实战案例</h2><p>为了更好理解，上述所有示例的IO情况都是以 <code>asyncio.sleep</code> 为例，而真实的项目开发中会用到很多IO的情况。</p>\n<h3 id=\"5-1-异步Redis\"><a href=\"#5-1-异步Redis\" class=\"headerlink\" title=\"5.1 异步Redis\"></a>5.1 异步Redis</h3><p>当通过python去操作 redis 时，链接、设置值、获取值 这些都涉及网络IO请求，使用 asycio 异步的方式可以在IO等待时去做一些其他任务，从而提升性能。</p>\n<p>安装Python异步操作 redis 模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aioredis</span><br></pre></td></tr></table></figure>\n\n<p>示例1：异步操作redis。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">address, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始执行&quot;</span>, address)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：创建redis连接</span></span><br><span class=\"line\">    redis = <span class=\"keyword\">await</span> aioredis.create_redis(address, password=password)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = &#123; car:&#123;key1:1,key2:2,key3:3&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：去redis中获取值</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    redis.close()</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：关闭redis连接</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.wait_closed()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, address)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(execute(<span class=\"string\">&#x27;redis://47.93.4.198:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>示例2：连接多个redis做操作（遇到IO会切换其他任务，提供了性能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">address, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始执行&quot;</span>, address)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379</span></span><br><span class=\"line\">    redis = <span class=\"keyword\">await</span> aioredis.create_redis_pool(address, password=password)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    redis.close()</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.wait_closed()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, address)</span><br><span class=\"line\">    </span><br><span class=\"line\">task_list = [</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;redis://47.93.4.197:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>),</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;redis://47.93.4.198:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure>\n\n<p>更多redis操作参考aioredis官网：<a href=\"https://aioredis.readthedocs.io/en/v1.3.0/start.html\">https://aioredis.readthedocs.io/en/v1.3.0/start.html</a></p>\n<h3 id=\"5-2-异步MySQL\"><a href=\"#5-2-异步MySQL\" class=\"headerlink\" title=\"5.2 异步MySQL\"></a>5.2 异步MySQL</h3><p>当通过python去操作MySQL时，连接、执行SQL、关闭都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。</p>\n<p>安装Python异步操作redis模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aiomysql</span><br></pre></td></tr></table></figure>\n\n<p>示例1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：连接MySQL</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> aiomysql.connect(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=<span class=\"string\">&#x27;123&#x27;</span>, db=<span class=\"string\">&#x27;mysql&#x27;</span>, )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：创建CURSOR</span></span><br><span class=\"line\">    cur = <span class=\"keyword\">await</span> conn.cursor()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：执行SQL</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：获取SQL结果</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：关闭链接</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(execute())</span><br></pre></td></tr></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">host, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始&quot;</span>, host)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> aiomysql.connect(host=host, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=password, db=<span class=\"string\">&#x27;mysql&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    cur = <span class=\"keyword\">await</span> conn.cursor()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, host)</span><br><span class=\"line\">    </span><br><span class=\"line\">task_list = [</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;47.93.40.197&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>),</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;47.93.40.197&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-FastAPI框架\"><a href=\"#5-3-FastAPI框架\" class=\"headerlink\" title=\"5.3 FastAPI框架\"></a>5.3 FastAPI框架</h3><p>FastAPI是一款用于构建API的高性能web框架，框架基于Python3.6+的 <code>type hints</code>搭建。</p>\n<p>接下里的异步示例以<code>FastAPI</code>和<code>uvicorn</code>来讲解（uvicorn是一个支持异步的asgi）。</p>\n<p>安装FastAPI web 框架，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install fastapi</span><br></pre></td></tr></table></figure>\n\n<p>安装uvicorn，本质上为web提供socket server的支持的asgi（一般支持异步称asgi、不支持异步称wsgi）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install uvicorn</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"><span class=\"keyword\">from</span> aioredis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_POOL = aioredis.ConnectionsPool(<span class=\"string\">&#x27;redis://47.193.14.198:6379&#x27;</span>, password=<span class=\"string\">&quot;root123&quot;</span>, minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 普通操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello World&quot;</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求来了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 连接池获取一个连接</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> REDIS_POOL.acquire()</span><br><span class=\"line\">    redis = Redis(conn)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 读取值</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 连接归还连接池</span></span><br><span class=\"line\">    REDIS_POOL.release(conn)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;luffy:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在有多个用户并发请求的情况下，异步方式来编写的接口可以在IO等待过程中去处理其他的请求，提供性能。</p>\n<p>例如：同时有两个用户并发来向接口 <code>http://127.0.0.1:5000/red</code> 发送请求，服务端只有一个线程，同一时刻只有一个请求被处理。 异步处理可以提供并发是因为：当视图函数在处理第一个请求时，第二个请求此时是等待被处理的状态，当第一个请求遇到IO等待时，会自动切换去接收并处理第二个请求，当遇到IO时自动化切换至其他请求，一旦有请求IO执行完毕，则会再次回到指定请求向下继续执行其功能代码。</p>\n<p>基于上下文管理，来实现自动化管理的案例：<br>示例1：redis</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"><span class=\"keyword\">from</span> aioredis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">REDIS_POOL = aioredis.ConnectionsPool(<span class=\"string\">&#x27;redis://47.193.14.198:6379&#x27;</span>, password=<span class=\"string\">&quot;root123&quot;</span>, minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 普通操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello World&quot;</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求来了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> REDIS_POOL.get() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        redis = Redis(conn)</span><br><span class=\"line\">        <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 读取值</span></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;fast3:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>示例2：mysql</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建数据库连接池</span></span><br><span class=\"line\">pool = aiomysql.Pool(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=<span class=\"string\">&#x27;123&#x27;</span>, db=<span class=\"string\">&#x27;mysql&#x27;</span>,</span><br><span class=\"line\">                     minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>, echo=<span class=\"literal\">False</span>, pool_recycle=-<span class=\"number\">1</span>, loop=asyncio.get_event_loop())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 去数据库连接池申请链接</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.acquire() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：执行SQL</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：获取SQL结果</span></span><br><span class=\"line\">            result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：关闭链接</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;result&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;fast2:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-爬虫\"><a href=\"#5-4-爬虫\" class=\"headerlink\" title=\"5.4 爬虫\"></a>5.4 爬虫</h3><p>在编写爬虫应用时，需要通过网络IO去请求目标数据，这种情况适合使用异步编程来提升性能，接下来我们使用支持异步编程的aiohttp模块来实现。</p>\n<p>安装aiohttp模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aiohttp</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> aiohttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch</span>(<span class=\"params\">session, url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;发送请求：&quot;</span>, url)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.get(url, verify_ssl=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">        text = <span class=\"keyword\">await</span> response.text()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;得到结果：&quot;</span>, url, <span class=\"built_in\">len</span>(text))</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        url_list = [</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://python.org&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://www.pythonav.com&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        tasks = [asyncio.create_task(fetch(session, url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.wait(tasks)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了提升性能越来越多的框架都在向异步编程靠拢，例如：sanic、tornado、django3.0、django channels组件 等，用更少资源可以做处理更多的事，何乐而不为呢。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-协程\"><a href=\"#1-协程\" class=\"headerlink\" title=\"1.协程\"></a>1.协程</h2><p>想学<code>asyncio</code>，得先了解协程，协程是根本呀！</p>\n<p>协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">func1()</span><br><span class=\"line\">func2()</span><br></pre></td></tr></table></figure>\n\n<p>上述代码是普通的函数定义和执行，按流程分别执行两个函数中的代码，并先后会输出：<code>1、2、3、4</code>。但如果介入协程技术那么就可以实现函数见代码切换执行，最终输入：<code>1、3、2、4</code> 。</p>\n<p>在Python中有多种方式可以实现协程，例如：</p>\n<ul>\n<li>greenlet，是一个第三方模块，用于实现协程代码（Gevent 协程就是基于 greenlet 实现）</li>\n<li><code>yield</code>，生成器，借助生成器的特点也可以实现协程代码。</li>\n<li><code>asyncio</code>，在 Python 3.4 中引入的模块用于编写协程代码。</li>\n<li><code>async</code> &amp; <code>awiat</code>，在 Python 3.5 中引入的两个关键字，结合<code>asyncio</code>模块可以更方便的编写协程代码。</li>\n</ul>\n<h3 id=\"1-1-greenlet\"><a href=\"#1-1-greenlet\" class=\"headerlink\" title=\"1.1 greenlet\"></a>1.1 greenlet</h3><p>greentlet 是一个第三方模块，需要提前安装 <code>pip3 install greenlet</code>才能使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> greenlet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)        <span class=\"comment\"># 第1步：输出 1</span></span><br><span class=\"line\">    gr2.switch()    <span class=\"comment\"># 第3步：切换到 func2 函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)        <span class=\"comment\"># 第6步：输出 2</span></span><br><span class=\"line\">    gr2.switch()    <span class=\"comment\"># 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)        <span class=\"comment\"># 第4步：输出 3</span></span><br><span class=\"line\">    gr1.switch()    <span class=\"comment\"># 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)        <span class=\"comment\"># 第8步：输出 4</span></span><br><span class=\"line\">    </span><br><span class=\"line\">gr1 = greenlet(func1)</span><br><span class=\"line\">gr2 = greenlet(func2)</span><br><span class=\"line\">gr1.switch() <span class=\"comment\"># 第1步：去执行 func1 函数</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：switch 中也可以传递参数用于在切换执行时相互传递值。</p>\n<h3 id=\"1-2-yield\"><a href=\"#1-2-yield\" class=\"headerlink\" title=\"1.2 yield\"></a>1.2 yield</h3><p>基于 Python 的生成器的<code>yield</code>和<code>yield form</code>关键字实现协程代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> func2()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span></span><br><span class=\"line\">    </span><br><span class=\"line\">f1 = func1()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> f1:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>yield form</code>关键字是在 Python 3.3 中引入的。</p>\n<h3 id=\"1-3-asyncio\"><a href=\"#1-3-asyncio\" class=\"headerlink\" title=\"1.3 asyncio\"></a>1.3 asyncio</h3><p>在 Python 3.4 之前官方未提供协程的类库，一般大家都是使用 greenlet 等其他来实现。在 Python 3.4 发布后官方正式支持协程，即：<code>asyncio</code>模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">2</span>)  <span class=\"comment\"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">tasks = [</span><br><span class=\"line\">    asyncio.ensure_future( func1() ),</span><br><span class=\"line\">    asyncio.ensure_future( func2() )</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>\n\n<p>注意：基于<code>asyncio</code>模块实现的协程比之前的要更厉害，因为他的内部还集成了遇到IO耗时操作自动切花的功能。</p>\n<h3 id=\"1-4-async-amp-await\"><a href=\"#1-4-async-amp-await\" class=\"headerlink\" title=\"1.4 async &amp; await\"></a>1.4 <code>async</code> &amp; <code>await</code></h3><p><code>async</code> &amp; <code>await</code> 关键字在 Python 3.5 版本中正式引入，基于他编写的协程代码其实就是 上一示例 的加强版，让代码可以更加简便。</p>\n<p>Python 3.8 之后 <code>@asyncio.coroutine</code> 装饰器就会被移除，推荐使用 <code>async</code> &amp; <code>awit</code> 关键字实现协程代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">tasks = [</span><br><span class=\"line\">    asyncio.ensure_future(func1()),</span><br><span class=\"line\">    asyncio.ensure_future(func2())</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-小结\"><a href=\"#1-5-小结\" class=\"headerlink\" title=\"1.5 小结\"></a>1.5 小结</h3><p>关于协程有多种实现方式，目前主流使用是Python官方推荐的 <code>asyncio</code> 模块和 <code>async</code>&amp;<code>await</code>关键字的方式，例如：在tonado、sanic、fastapi、django3 中均已支持。</p>\n<p>接下来，我们也会针对 <code>asyncio</code>模块 + <code>async</code> &amp; <code>await</code> 关键字进行更加详细的讲解。</p>\n<h2 id=\"2-协程的意义\"><a href=\"#2-协程的意义\" class=\"headerlink\" title=\"2.协程的意义\"></a>2.协程的意义</h2><p>通过学习，我们已经了解到协程可以通过一个线程在多个上下文中进行来回切换执行。</p>\n<p><strong>但是</strong>，协程来回切换执行的意义何在呢？（网上看到很多文章舔协程，协程牛逼之处是哪里呢？）</p>\n<blockquote>\n<p>计算型的操作，利用协程来回切换执行，没有任何意义，来回切换并保存状态 反倒会降低性能。IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO操作结束后再自动回调，那么就会大大节省资源并提供性能，从而实现异步编程（不等待任务结束就可以去执行其他代码）。</p>\n</blockquote>\n<h3 id=\"2-1-爬虫案例\"><a href=\"#2-1-爬虫案例\" class=\"headerlink\" title=\"2.1 爬虫案例\"></a>2.1 爬虫案例</h3><p>例如：用代码实现下载 <code>url_list</code> 中的图片。</p>\n<ul>\n<li><p>方式一：同步编程实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">下载图片使用第三方模块requests，请提前安装：pip3 install requests</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_image</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始下载:&quot;</span>,url)</span><br><span class=\"line\">    <span class=\"comment\"># 发送网络请求，下载图片</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;下载完成&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 图片保存到本地文件</span></span><br><span class=\"line\">    file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">        file_object.write(response.content)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url_list = [</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">        download_image(item)</span><br></pre></td></tr></table></figure></li>\n<li><p>方式二：基于协程的异步编程实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> aiohttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch</span>(<span class=\"params\">session, url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;发送请求：&quot;</span>, url)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.get(url, verify_ssl=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">        content = <span class=\"keyword\">await</span> response.content.read()</span><br><span class=\"line\">        file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">            file_object.write(content)</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        url_list = [</span><br><span class=\"line\">\t<span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">   <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        tasks = [asyncio.create_task(fetch(session, url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.wait(tasks)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    asyncio.run(main())</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>上述两种的执行对比之后会发现，<code>基于协程的异步编程</code> 要比 <code>同步编程</code>的效率高了很多。因为：</p>\n<ul>\n<li>同步编程，按照顺序逐一排队执行，如果图片下载时间为2分钟，那么全部执行完则需要6分钟。</li>\n<li>异步编程，几乎同时发出了3个下载任务的请求（遇到IO请求自动切换去发送其他任务请求），如果图片下载时间为2分钟，那么全部执行完毕也大概需要2分钟左右就可以了。</li>\n</ul>\n<h3 id=\"2-2-小结\"><a href=\"#2-2-小结\" class=\"headerlink\" title=\"2.2 小结\"></a>2.2 小结</h3><p>协程一般应用在有IO操作的程序中，因为协程可以利用IO等待的时间去执行一些其他的代码，从而提升代码执行效率。</p>\n<p>生活中不也是这样的么，假设 你是一家制造汽车的老板，员工点击设备的【开始】按钮之后，在设备前需等待30分钟，然后点击【结束】按钮，此时作为老板的你一定希望这个员工在等待的那30分钟的时间去做点其他的工作。</p>\n<h2 id=\"3-异步编程\"><a href=\"#3-异步编程\" class=\"headerlink\" title=\"3.异步编程\"></a>3.异步编程</h2><p>基于<code>async</code> &amp; <code>await</code>关键字的协程可以实现异步编程，这也是目前python异步相关的主流技术。</p>\n<p>想要真正的了解Python中内置的异步编程，根据下文的顺序一点点来看。</p>\n<h3 id=\"3-1-事件循环\"><a href=\"#3-1-事件循环\" class=\"headerlink\" title=\"3.1 事件循环\"></a>3.1 事件循环</h3><p>事件循环，可以把他当做是一个while循环，这个while循环在周期性的运行并执行一些<code>任务</code>，在特定条件下终止循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 伪代码</span></span><br><span class=\"line\">任务列表 = [ 任务<span class=\"number\">1</span>, 任务<span class=\"number\">2</span>, 任务<span class=\"number\">3</span>,... ]</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将<span class=\"string\">&#x27;可执行&#x27;</span>和<span class=\"string\">&#x27;已完成&#x27;</span>的任务返回</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 就绪任务 <span class=\"keyword\">in</span> 已准备就绪的任务列表:</span><br><span class=\"line\">        执行已就绪的任务</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 已完成的任务 <span class=\"keyword\">in</span> 已完成的任务列表:</span><br><span class=\"line\">        在任务列表中移除 已完成的任务</span><br><span class=\"line\">    如果 任务列表 中的任务都已完成，则终止循环</span><br></pre></td></tr></table></figure>\n\n<p>在编写程序时候可以通过如下代码来获取和创建事件循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-协程和异步编程\"><a href=\"#3-2-协程和异步编程\" class=\"headerlink\" title=\"3.2 协程和异步编程\"></a>3.2 协程和异步编程</h3><p>协程函数，定义形式为 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-def\"><code>async def</code></a> 的函数。</p>\n<p>协程对象，调用 <em>协程函数</em> 所返回的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个协程函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用协程函数，返回一个协程对象</span></span><br><span class=\"line\">result = func()</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：调用协程函数时，函数内部代码不会执行，只是会返回一个协程对象。</p>\n<h4 id=\"3-2-1-基本应用\"><a href=\"#3-2-1-基本应用\" class=\"headerlink\" title=\"3.2.1 基本应用\"></a>3.2.1 基本应用</h4><p>程序中，如果想要执行协程函数的内部代码，需要 <code>事件循环</code> 和 <code>协程对象</code> 配合才能实现，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;协程内部代码&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 调用协程函数，返回一个协程对象。</span></span><br><span class=\"line\">result = func()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"comment\"># loop = asyncio.get_event_loop() # 创建一个事件循环</span></span><br><span class=\"line\"><span class=\"comment\"># loop.run_until_complete(result) # 将协程当做任务提交到事件循环的任务列表中，协程执行完成之后终止。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二</span></span><br><span class=\"line\"><span class=\"comment\"># 本质上方式一是一样的，内部先 创建事件循环 然后执行 run_until_complete，一个简便的写法。</span></span><br><span class=\"line\"><span class=\"comment\"># asyncio.run 函数在 Python 3.7 中加入 asyncio 模块，</span></span><br><span class=\"line\">asyncio.run(result)</span><br></pre></td></tr></table></figure>\n\n<p>这个过程可以简单理解为：将<code>协程</code>当做任务添加到 <code>事件循环</code> 的任务列表，然后事件循环检测列表中的<code>协程</code>是否 已准备就绪（默认可理解为就绪状态），如果准备就绪则执行其内部代码。</p>\n<h4 id=\"3-2-2-await\"><a href=\"#3-2-2-await\" class=\"headerlink\" title=\"3.2.2 await\"></a>3.2.2 await</h4><p>await是一个只能在协程函数中使用的关键字，用于遇到IO操作时挂起 当前协程（任务），当前协程（任务）挂起过程中 事件循环可以去执行其他的协程（任务），当前协程IO处理完成时，可以再次切换回来执行await之后的代码。代码如下：</p>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。</span></span><br><span class=\"line\">    <span class=\"comment\"># 当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">result = func()</span><br><span class=\"line\">asyncio.run(result)</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">others</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值&#x27;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run( func() )</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">others</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;返回值&#x27;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response1 = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response1)</span><br><span class=\"line\">    response2 = <span class=\"keyword\">await</span> others()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response2)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run( func() )</span><br></pre></td></tr></table></figure>\n\n<p>上述的所有示例都只是创建了一个任务，即：事件循环的任务列表中只有一个任务，所以在IO等待时无法演示切换到其他任务效果。</p>\n<p>在程序想要创建多个任务对象，需要使用Task对象来实现。</p>\n<h4 id=\"3-2-3-Task对象\"><a href=\"#3-2-3-Task对象\" class=\"headerlink\" title=\"3.2.3 Task对象\"></a>3.2.3 Task对象</h4><blockquote>\n<p><em>Tasks</em> are used to schedule coroutines <em>concurrently</em>.</p>\n<p>When a coroutine is wrapped into a <em>Task</em> with functions like <a href=\"https://docs.python.org/3.8/library/asyncio-task.html#asyncio.create_task\"><code>asyncio.create_task()</code></a> the coroutine is automatically scheduled to run soon。</p>\n</blockquote>\n<p>Tasks用于并发调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数以外，还可以用低层级的 <code>loop.create_task()</code> 或 <code>ensure_future()</code> 函数。不建议手动实例化 Task 对象。</p>\n<p>本质上是将协程对象封装成task对象，并将协程立即加入事件循环，同时追踪协程的状态。</p>\n<p>注意：<code>asyncio.create_task()</code> 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数。</p>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;返回值&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    task1 = asyncio.create_task(func())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到一个Task对象中并立即添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    task2 = asyncio.create_task(func())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main结束&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处的await是等待相对应的协程全都执行完毕并获取结果</span></span><br><span class=\"line\">    ret1 = <span class=\"keyword\">await</span> task1</span><br><span class=\"line\">    ret2 = <span class=\"keyword\">await</span> task2</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret1, ret2)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;返回值&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建协程，将协程封装到Task对象中并添加到事件循环的任务列表中，等待事件循环去执行（默认是就绪状态）。</span></span><br><span class=\"line\">    <span class=\"comment\"># 在调用</span></span><br><span class=\"line\">    task_list = [</span><br><span class=\"line\">        asyncio.create_task(func(), name=<span class=\"string\">&quot;n1&quot;</span>),</span><br><span class=\"line\">        asyncio.create_task(func(), name=<span class=\"string\">&quot;n2&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;main结束&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处的await是等待所有协程执行完毕，并将所有协程的返回值保存到done</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果设置了timeout值，则意味着此处最多等待的秒，完成的协程返回值写入到done中，未完成则写到pending中。</span></span><br><span class=\"line\">    done, pending = <span class=\"keyword\">await</span> asyncio.wait(task_list, timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(done, pending)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>asyncio.wait</code> 源码内部会对列表中的每个协程执行ensure_future从而封装为Task对象，所以在和wait配合使用时task_list的值为<code>[func(),func()]</code> 也是可以的。</p>\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;执行协程函数内部代码&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span></span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;IO请求结束，结果为：&quot;</span>, response)</span><br><span class=\"line\">    </span><br><span class=\"line\">coroutine_list = [func(), func()]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误：coroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ]  </span></span><br><span class=\"line\"><span class=\"comment\"># 此处不能直接 asyncio.create_task，因为将Task立即加入到事件循环的任务列表，</span></span><br><span class=\"line\"><span class=\"comment\"># 但此时事件循环还未创建，所以会报错。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用asyncio.wait将列表封装为一个协程，并调用asyncio.run实现执行两个协程</span></span><br><span class=\"line\"><span class=\"comment\"># asyncio.wait内部会对列表中的每个协程执行ensure_future，封装为Task对象。</span></span><br><span class=\"line\">done,pending = asyncio.run( asyncio.wait(coroutine_list) )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-4-asyncio-Future对象\"><a href=\"#3-2-4-asyncio-Future对象\" class=\"headerlink\" title=\"3.2.4 asyncio.Future对象\"></a>3.2.4 asyncio.Future对象</h4><blockquote>\n<p>A <code>Future</code>is a special <strong>low-level</strong> awaitable object that represents an <strong>eventual result</strong> of an asynchronous operation.</p>\n</blockquote>\n<p>asyncio中的Future对象是一个相对更偏向底层的可对象，通常我们不会直接用到这个对象，而是直接使用Task对象来完成任务的并和状态的追踪。（ Task 是 Futrue的子类 ）</p>\n<p>Future为我们提供了异步编程中的 最终结果 的处理（Task类也具备状态处理的功能）。</p>\n<p>示例1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前事件循环</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    <span class=\"comment\"># # 创建一个任务（Future对象），这个任务什么都不干。</span></span><br><span class=\"line\">    fut = loop.create_future()</span><br><span class=\"line\">    <span class=\"comment\"># 等待任务最终结果（Future对象），没有结果则会一直等下去。</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_after</span>(<span class=\"params\">fut</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    fut.set_result(<span class=\"string\">&quot;666&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取当前事件循环</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。</span></span><br><span class=\"line\">    fut = loop.create_future()</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。</span></span><br><span class=\"line\">    <span class=\"comment\"># 即手动设置future任务的最终结果，那么fut就可以结束了。</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> loop.create_task(set_after(fut))</span><br><span class=\"line\">    <span class=\"comment\"># 等待 Future对象获取 最终结果，否则一直等下去</span></span><br><span class=\"line\">    data = <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>Future对象本身函数进行绑定，所以想要让事件循环获取Future的结果，则需要手动设置。而Task对象继承了Future对象，其实就对Future进行扩展，他可以实现在对应绑定的函数执行完成之后，自动执行<code>set_result</code>，从而实现自动结束。</p>\n<p>虽然，平时使用的是Task对象，但对于结果的处理本质是基于Future对象来实现的。</p>\n<p>扩展：支持 <code>await 对象</code>语 法的对象课成为可等待对象，所以 <code>协程对象</code>、<code>Task对象</code>、<code>Future对象</code> 都可以被成为可等待对象。</p>\n<h4 id=\"3-2-5-futures-Future对象\"><a href=\"#3-2-5-futures-Future对象\" class=\"headerlink\" title=\"3.2.5 futures.Future对象\"></a>3.2.5 futures.Future对象</h4><p>在Python的<code>concurrent.futures</code>模块中也有一个Future对象，这个对象是基于线程池和进程池实现异步操作时使用的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> Future</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures.thread <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures.process <span class=\"keyword\">import</span> ProcessPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">value</span>):</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">    </span><br><span class=\"line\">pool = ThreadPoolExecutor(max_workers=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或 pool = ProcessPoolExecutor(max_workers=5)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    fut = pool.submit(func, i)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fut)</span><br></pre></td></tr></table></figure>\n\n<p>两个Future对象是不同的，他们是为不同的应用场景而设计，例如：<code>concurrent.futures.Future</code>不支持await语法 等。</p>\n<p>官方提示两对象之间不同：</p>\n<ul>\n<li>unlike asyncio Futures, <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.Future\"><code>concurrent.futures.Future</code></a> instances cannot be awaited.</li>\n<li><a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result\"><code>asyncio.Future.result()</code></a> and <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception\"><code>asyncio.Future.exception()</code></a> do not accept the <em>timeout</em> argument.</li>\n<li><a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.result\"><code>asyncio.Future.result()</code></a> and <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.exception\"><code>asyncio.Future.exception()</code></a> raise an <a href=\"https://docs.python.org/3.8/library/asyncio-exceptions.html#asyncio.InvalidStateError\"><code>InvalidStateError</code></a> exception when the Future is not <em>done</em>.</li>\n<li>Callbacks registered with <a href=\"https://docs.python.org/3.8/library/asyncio-future.html#asyncio.Future.add_done_callback\"><code>asyncio.Future.add_done_callback()</code></a> are not called immediately. They are scheduled with <a href=\"https://docs.python.org/3.8/library/asyncio-eventloop.html#asyncio.loop.call_soon\"><code>loop.call_soon()</code></a> instead.</li>\n<li>asyncio Future is not compatible with the <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.wait\"><code>concurrent.futures.wait()</code></a> and <a href=\"https://docs.python.org/3.8/library/concurrent.futures.html#concurrent.futures.as_completed\"><code>concurrent.futures.as_completed()</code></a> functions.</li>\n</ul>\n<p>在Python提供了一个将<code>futures.Future</code> 对象包装成<code>asyncio.Future</code>对象的函数 <code>asynic.wrap_future</code>。</p>\n<p>接下里你肯定问：为什么python会提供这种功能？</p>\n<p>其实，一般在程序开发中我们要么统一使用 asyncio 的协程实现异步操作、要么都使用进程池和线程池实现异步操作。但如果 <code>协程的异步</code>和 <code>进程池/线程池的异步</code> 混搭时，那么就会用到此功能了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> concurrent.futures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 某个耗时操作</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SB&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    loop = asyncio.get_running_loop()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 1. Run in the default loop&#x27;s executor ( 默认ThreadPoolExecutor )</span></span><br><span class=\"line\">    <span class=\"comment\"># 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象</span></span><br><span class=\"line\">    <span class=\"comment\"># 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。</span></span><br><span class=\"line\">    fut = loop.run_in_executor(<span class=\"literal\">None</span>, func1)</span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> fut</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;default thread pool&#x27;</span>, result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 2. Run in a custom thread pool:</span></span><br><span class=\"line\">    <span class=\"comment\"># with concurrent.futures.ThreadPoolExecutor() as pool:</span></span><br><span class=\"line\">    <span class=\"comment\">#     result = await loop.run_in_executor(</span></span><br><span class=\"line\">    <span class=\"comment\">#         pool, func1)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(&#x27;custom thread pool&#x27;, result)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 3. Run in a custom process pool:</span></span><br><span class=\"line\">    <span class=\"comment\"># with concurrent.futures.ProcessPoolExecutor() as pool:</span></span><br><span class=\"line\">    <span class=\"comment\">#     result = await loop.run_in_executor(</span></span><br><span class=\"line\">    <span class=\"comment\">#         pool, func1)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(&#x27;custom process pool&#x27;, result)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：当项目以协程式的异步编程开发时，如果要使用一个第三方模块，而第三方模块不支持协程方式异步编程时，就需要用到这个功能，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_image</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始下载:&quot;</span>, url)</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    <span class=\"comment\"># requests模块默认不支持异步操作，所以就使用线程池来配合实现了。</span></span><br><span class=\"line\">    future = loop.run_in_executor(<span class=\"literal\">None</span>, requests.get, url)</span><br><span class=\"line\">    </span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> future</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;下载完成&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 图片保存到本地文件</span></span><br><span class=\"line\">    file_name = url.rsplit(<span class=\"string\">&#x27;_&#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">        file_object.write(response.content)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url_list = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#x27;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    tasks = [download_image(url) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete( asyncio.wait(tasks) )</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-6-异步迭代器\"><a href=\"#3-2-6-异步迭代器\" class=\"headerlink\" title=\"3.2.6 异步迭代器\"></a>3.2.6 异步迭代器</h4><p><strong>什么是异步迭代器</strong></p>\n<p>实现了 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__\"><code>__aiter__()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__\"><code>__anext__()</code></a> 方法的对象。<code>__anext__</code> 必须返回一个 <a href=\"https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable\">awaitable</a> 对象。<a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for\"><code>async for</code></a> 会处理异步迭代器的 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__\"><code>__anext__()</code></a> 方法所返回的可等待对象，直到其引发一个 <a href=\"https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration\"><code>StopAsyncIteration</code></a> 异常。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<p><strong>什么是异步可迭代对象？</strong></p>\n<p>可在 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for\"><code>async for</code></a> 语句中被使用的对象。必须通过它的 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__\"><code>__aiter__()</code></a> 方法返回一个 <a href=\"https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator\">asynchronous iterator</a>。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reader</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 自定义异步迭代器（同时也是异步可迭代对象） &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readline</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># await asyncio.sleep(1)</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.count == <span class=\"number\">100</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.count</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aiter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__anext__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        val = <span class=\"keyword\">await</span> self.readline()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopAsyncIteration</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建异步可迭代对象</span></span><br><span class=\"line\">    async_iter = Reader()</span><br><span class=\"line\">    <span class=\"comment\"># async for 必须要放在async def函数内，否则语法错误。</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> async_iter:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">        </span><br><span class=\"line\">asyncio.run(func())</span><br></pre></td></tr></table></figure>\n\n<p>异步迭代器其实没什么太大的作用，只是支持了async for语法而已。</p>\n<h4 id=\"3-2-6-异步上下文管理器\"><a href=\"#3-2-6-异步上下文管理器\" class=\"headerlink\" title=\"3.2.6 异步上下文管理器\"></a>3.2.6 异步上下文管理器</h4><p>此种对象通过定义 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aenter__\"><code>__aenter__()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__\"><code>__aexit__()</code></a> 方法来对 <a href=\"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-with\"><code>async with</code></a> 语句中的环境进行控制。由 <a href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> 引入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncContextManager</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.conn = <span class=\"literal\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_something</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步操作数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">666</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aenter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步链接数据库</span></span><br><span class=\"line\">        self.conn = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__aexit__</span>(<span class=\"params\">self, exc_type, exc, tb</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 异步关闭数据库链接</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> AsyncContextManager() <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> f.do_something()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">        </span><br><span class=\"line\">asyncio.run(func())</span><br></pre></td></tr></table></figure>\n\n<p>这个异步的上下文管理器还是比较有用的，平时在开发过程中 打开、处理、关闭 操作时，就可以用这种方式来处理。</p>\n<h3 id=\"3-3-小结\"><a href=\"#3-3-小结\" class=\"headerlink\" title=\"3.3 小结\"></a>3.3 小结</h3><p>在程序中只要看到<code>async</code>和<code>await</code>关键字，其内部就是基于协程实现的异步编程，这种异步编程是通过一个线程在IO等待时间去执行其他任务，从而实现并发。</p>\n<p>以上就是异步编程的常见操作，内容参考官方文档。</p>\n<ul>\n<li>中文版：<a href=\"https://docs.python.org/zh-cn/3.8/library/asyncio.html\">https://docs.python.org/zh-cn/3.8/library/asyncio.html</a></li>\n<li>英文本：<a href=\"https://docs.python.org/3.8/library/asyncio.html\">https://docs.python.org/3.8/library/asyncio.html</a></li>\n</ul>\n<h2 id=\"4-uvloop\"><a href=\"#4-uvloop\" class=\"headerlink\" title=\"4. uvloop\"></a>4. uvloop</h2><p>Python标准库中提供了<code>asyncio</code>模块，用于支持基于协程的异步编程。</p>\n<p>uvloop是 asyncio 中的事件循环的替代方案，替换后可以使得asyncio性能提高。事实上，uvloop要比nodejs、gevent等其他python异步框架至少要快2倍，性能可以比肩Go语言。</p>\n<p>安装uvloop</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install uvloop</span><br></pre></td></tr></table></figure>\n\n<p>在项目中想要使用uvloop替换asyncio的事件循环也非常简单，只要在代码中这么做就行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvloop</span><br><span class=\"line\">asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编写asyncio的代码，与之前写的代码一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 内部的事件循环自动化会变为uvloop</span></span><br><span class=\"line\">asyncio.run(...)</span><br></pre></td></tr></table></figure>\n\n<p>注意：知名的asgi uvicorn内部就是使用的 uvloop 的事件循环。</p>\n<h2 id=\"5-实战案例\"><a href=\"#5-实战案例\" class=\"headerlink\" title=\"5.实战案例\"></a>5.实战案例</h2><p>为了更好理解，上述所有示例的IO情况都是以 <code>asyncio.sleep</code> 为例，而真实的项目开发中会用到很多IO的情况。</p>\n<h3 id=\"5-1-异步Redis\"><a href=\"#5-1-异步Redis\" class=\"headerlink\" title=\"5.1 异步Redis\"></a>5.1 异步Redis</h3><p>当通过python去操作 redis 时，链接、设置值、获取值 这些都涉及网络IO请求，使用 asycio 异步的方式可以在IO等待时去做一些其他任务，从而提升性能。</p>\n<p>安装Python异步操作 redis 模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aioredis</span><br></pre></td></tr></table></figure>\n\n<p>示例1：异步操作redis。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">address, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始执行&quot;</span>, address)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：创建redis连接</span></span><br><span class=\"line\">    redis = <span class=\"keyword\">await</span> aioredis.create_redis(address, password=password)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = &#123; car:&#123;key1:1,key2:2,key3:3&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：去redis中获取值</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    redis.close()</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：关闭redis连接</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.wait_closed()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, address)</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(execute(<span class=\"string\">&#x27;redis://47.93.4.198:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>示例2：连接多个redis做操作（遇到IO会切换其他任务，提供了性能）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">address, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始执行&quot;</span>, address)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379</span></span><br><span class=\"line\">    redis = <span class=\"keyword\">await</span> aioredis.create_redis_pool(address, password=password)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    redis.close()</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.wait_closed()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, address)</span><br><span class=\"line\">    </span><br><span class=\"line\">task_list = [</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;redis://47.93.4.197:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>),</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;redis://47.93.4.198:6379&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure>\n\n<p>更多redis操作参考aioredis官网：<a href=\"https://aioredis.readthedocs.io/en/v1.3.0/start.html\">https://aioredis.readthedocs.io/en/v1.3.0/start.html</a></p>\n<h3 id=\"5-2-异步MySQL\"><a href=\"#5-2-异步MySQL\" class=\"headerlink\" title=\"5.2 异步MySQL\"></a>5.2 异步MySQL</h3><p>当通过python去操作MySQL时，连接、执行SQL、关闭都涉及网络IO请求，使用asycio异步的方式可以在IO等待时去做一些其他任务，从而提升性能。</p>\n<p>安装Python异步操作redis模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aiomysql</span><br></pre></td></tr></table></figure>\n\n<p>示例1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：连接MySQL</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> aiomysql.connect(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=<span class=\"string\">&#x27;123&#x27;</span>, db=<span class=\"string\">&#x27;mysql&#x27;</span>, )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：创建CURSOR</span></span><br><span class=\"line\">    cur = <span class=\"keyword\">await</span> conn.cursor()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：执行SQL</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：获取SQL结果</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：关闭链接</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">asyncio.run(execute())</span><br></pre></td></tr></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">host, password</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始&quot;</span>, host)</span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> aiomysql.connect(host=host, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=password, db=<span class=\"string\">&#x27;mysql&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    cur = <span class=\"keyword\">await</span> conn.cursor()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 网络IO操作：遇到IO会自动切换任务</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> cur.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;结束&quot;</span>, host)</span><br><span class=\"line\">    </span><br><span class=\"line\">task_list = [</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;47.93.40.197&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>),</span><br><span class=\"line\">    execute(<span class=\"string\">&#x27;47.93.40.197&#x27;</span>, <span class=\"string\">&quot;root!2345&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(asyncio.wait(task_list))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-FastAPI框架\"><a href=\"#5-3-FastAPI框架\" class=\"headerlink\" title=\"5.3 FastAPI框架\"></a>5.3 FastAPI框架</h3><p>FastAPI是一款用于构建API的高性能web框架，框架基于Python3.6+的 <code>type hints</code>搭建。</p>\n<p>接下里的异步示例以<code>FastAPI</code>和<code>uvicorn</code>来讲解（uvicorn是一个支持异步的asgi）。</p>\n<p>安装FastAPI web 框架，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install fastapi</span><br></pre></td></tr></table></figure>\n\n<p>安装uvicorn，本质上为web提供socket server的支持的asgi（一般支持异步称asgi、不支持异步称wsgi）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install uvicorn</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"><span class=\"keyword\">from</span> aioredis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_POOL = aioredis.ConnectionsPool(<span class=\"string\">&#x27;redis://47.193.14.198:6379&#x27;</span>, password=<span class=\"string\">&quot;root123&quot;</span>, minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 普通操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello World&quot;</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求来了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 连接池获取一个连接</span></span><br><span class=\"line\">    conn = <span class=\"keyword\">await</span> REDIS_POOL.acquire()</span><br><span class=\"line\">    redis = Redis(conn)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 读取值</span></span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 连接归还连接池</span></span><br><span class=\"line\">    REDIS_POOL.release(conn)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;luffy:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在有多个用户并发请求的情况下，异步方式来编写的接口可以在IO等待过程中去处理其他的请求，提供性能。</p>\n<p>例如：同时有两个用户并发来向接口 <code>http://127.0.0.1:5000/red</code> 发送请求，服务端只有一个线程，同一时刻只有一个请求被处理。 异步处理可以提供并发是因为：当视图函数在处理第一个请求时，第二个请求此时是等待被处理的状态，当第一个请求遇到IO等待时，会自动切换去接收并处理第二个请求，当遇到IO时自动化切换至其他请求，一旦有请求IO执行完毕，则会再次回到指定请求向下继续执行其功能代码。</p>\n<p>基于上下文管理，来实现自动化管理的案例：<br>示例1：redis</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">import</span> aioredis</span><br><span class=\"line\"><span class=\"keyword\">from</span> aioredis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\">REDIS_POOL = aioredis.ConnectionsPool(<span class=\"string\">&#x27;redis://47.193.14.198:6379&#x27;</span>, password=<span class=\"string\">&quot;root123&quot;</span>, minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 普通操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello World&quot;</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求来了&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> REDIS_POOL.get() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        redis = Redis(conn)</span><br><span class=\"line\">        <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> redis.hmset_dict(<span class=\"string\">&#x27;car&#x27;</span>, key1=<span class=\"number\">1</span>, key2=<span class=\"number\">2</span>, key3=<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 读取值</span></span><br><span class=\"line\">        result = <span class=\"keyword\">await</span> redis.hgetall(<span class=\"string\">&#x27;car&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;fast3:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>示例2：mysql</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI</span><br><span class=\"line\"><span class=\"keyword\">import</span> aiomysql</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建数据库连接池</span></span><br><span class=\"line\">pool = aiomysql.Pool(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">&#x27;root&#x27;</span>, password=<span class=\"string\">&#x27;123&#x27;</span>, db=<span class=\"string\">&#x27;mysql&#x27;</span>,</span><br><span class=\"line\">                     minsize=<span class=\"number\">1</span>, maxsize=<span class=\"number\">10</span>, echo=<span class=\"literal\">False</span>, pool_recycle=-<span class=\"number\">1</span>, loop=asyncio.get_event_loop())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/red&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">red</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 去数据库连接池申请链接</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> pool.acquire() <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> conn.cursor() <span class=\"keyword\">as</span> cur:</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：执行SQL</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> cur.execute(<span class=\"string\">&quot;SELECT Host,User FROM user&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：获取SQL结果</span></span><br><span class=\"line\">            result = <span class=\"keyword\">await</span> cur.fetchall()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">            <span class=\"comment\"># 网络IO操作：关闭链接</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;result&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    uvicorn.run(<span class=\"string\">&quot;fast2:app&quot;</span>, host=<span class=\"string\">&quot;127.0.0.1&quot;</span>, port=<span class=\"number\">5000</span>, log_level=<span class=\"string\">&quot;info&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-爬虫\"><a href=\"#5-4-爬虫\" class=\"headerlink\" title=\"5.4 爬虫\"></a>5.4 爬虫</h3><p>在编写爬虫应用时，需要通过网络IO去请求目标数据，这种情况适合使用异步编程来提升性能，接下来我们使用支持异步编程的aiohttp模块来实现。</p>\n<p>安装aiohttp模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install aiohttp</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> aiohttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch</span>(<span class=\"params\">session, url</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;发送请求：&quot;</span>, url)</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> session.get(url, verify_ssl=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">        text = <span class=\"keyword\">await</span> response.text()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;得到结果：&quot;</span>, url, <span class=\"built_in\">len</span>(text))</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> aiohttp.ClientSession() <span class=\"keyword\">as</span> session:</span><br><span class=\"line\">        url_list = [</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://python.org&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;https://www.pythonav.com&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        tasks = [asyncio.create_task(fetch(session, url)) <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list]</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.wait(tasks)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了提升性能越来越多的框架都在向异步编程靠拢，例如：sanic、tornado、django3.0、django channels组件 等，用更少资源可以做处理更多的事，何乐而不为呢。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckp7s97dc0001exvf8ioeeonp","category_id":"ckp7s97de0002exvf985784vz","_id":"ckp7s97di0005exvfci7v5uvd"}],"PostTag":[{"post_id":"ckp7s97dc0001exvf8ioeeonp","tag_id":"ckp7s97dg0003exvf5ptc8bty","_id":"ckp7s97di0004exvfbcuw3ybh"}],"Tag":[{"name":"asyncio","_id":"ckp7s97dg0003exvf5ptc8bty"}]}}